// Code generated by Thrift Compiler (0.20.0). DO NOT EDIT.

package SyncService

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"time"
  "linebotgodmode/library/thrift"
	"strings"
	"regexp"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal
// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

type ContentType int64
const (
  ContentType_NONE ContentType = 0
  ContentType_IMAGE ContentType = 1
  ContentType_VIDEO ContentType = 2
  ContentType_AUDIO ContentType = 3
  ContentType_HTML ContentType = 4
  ContentType_PDF ContentType = 5
  ContentType_CALL ContentType = 6
  ContentType_STICKER ContentType = 7
  ContentType_PRESENCE ContentType = 8
  ContentType_GIFT ContentType = 9
  ContentType_GROUPBOARD ContentType = 10
  ContentType_APPLINK ContentType = 11
  ContentType_LINK ContentType = 12
  ContentType_CONTACT ContentType = 13
  ContentType_FILE ContentType = 14
  ContentType_LOCATION ContentType = 15
  ContentType_POSTNOTIFICATION ContentType = 16
  ContentType_RICH ContentType = 17
  ContentType_CHATEVENT ContentType = 18
  ContentType_MUSIC ContentType = 19
  ContentType_PAYMENT ContentType = 20
  ContentType_EXTIMAGE ContentType = 21
  ContentType_FLEX ContentType = 22
)

func (p ContentType) String() string {
  switch p {
  case ContentType_NONE: return "NONE"
  case ContentType_IMAGE: return "IMAGE"
  case ContentType_VIDEO: return "VIDEO"
  case ContentType_AUDIO: return "AUDIO"
  case ContentType_HTML: return "HTML"
  case ContentType_PDF: return "PDF"
  case ContentType_CALL: return "CALL"
  case ContentType_STICKER: return "STICKER"
  case ContentType_PRESENCE: return "PRESENCE"
  case ContentType_GIFT: return "GIFT"
  case ContentType_GROUPBOARD: return "GROUPBOARD"
  case ContentType_APPLINK: return "APPLINK"
  case ContentType_LINK: return "LINK"
  case ContentType_CONTACT: return "CONTACT"
  case ContentType_FILE: return "FILE"
  case ContentType_LOCATION: return "LOCATION"
  case ContentType_POSTNOTIFICATION: return "POSTNOTIFICATION"
  case ContentType_RICH: return "RICH"
  case ContentType_CHATEVENT: return "CHATEVENT"
  case ContentType_MUSIC: return "MUSIC"
  case ContentType_PAYMENT: return "PAYMENT"
  case ContentType_EXTIMAGE: return "EXTIMAGE"
  case ContentType_FLEX: return "FLEX"
  }
  return "<UNSET>"
}

func ContentTypeFromString(s string) (ContentType, error) {
  switch s {
  case "NONE": return ContentType_NONE, nil 
  case "IMAGE": return ContentType_IMAGE, nil 
  case "VIDEO": return ContentType_VIDEO, nil 
  case "AUDIO": return ContentType_AUDIO, nil 
  case "HTML": return ContentType_HTML, nil 
  case "PDF": return ContentType_PDF, nil 
  case "CALL": return ContentType_CALL, nil 
  case "STICKER": return ContentType_STICKER, nil 
  case "PRESENCE": return ContentType_PRESENCE, nil 
  case "GIFT": return ContentType_GIFT, nil 
  case "GROUPBOARD": return ContentType_GROUPBOARD, nil 
  case "APPLINK": return ContentType_APPLINK, nil 
  case "LINK": return ContentType_LINK, nil 
  case "CONTACT": return ContentType_CONTACT, nil 
  case "FILE": return ContentType_FILE, nil 
  case "LOCATION": return ContentType_LOCATION, nil 
  case "POSTNOTIFICATION": return ContentType_POSTNOTIFICATION, nil 
  case "RICH": return ContentType_RICH, nil 
  case "CHATEVENT": return ContentType_CHATEVENT, nil 
  case "MUSIC": return ContentType_MUSIC, nil 
  case "PAYMENT": return ContentType_PAYMENT, nil 
  case "EXTIMAGE": return ContentType_EXTIMAGE, nil 
  case "FLEX": return ContentType_FLEX, nil 
  }
  return ContentType(0), fmt.Errorf("not a valid ContentType string")
}


func ContentTypePtr(v ContentType) *ContentType { return &v }

func (p ContentType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ContentType) UnmarshalText(text []byte) error {
q, err := ContentTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ContentType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ContentType(v)
return nil
}

func (p * ContentType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type MessageRelationType int64
const (
  MessageRelationType_FORWARD MessageRelationType = 0
  MessageRelationType_AUTO_REPLY MessageRelationType = 1
  MessageRelationType_SUBORDINATE MessageRelationType = 2
  MessageRelationType_REPLY MessageRelationType = 3
)

func (p MessageRelationType) String() string {
  switch p {
  case MessageRelationType_FORWARD: return "FORWARD"
  case MessageRelationType_AUTO_REPLY: return "AUTO_REPLY"
  case MessageRelationType_SUBORDINATE: return "SUBORDINATE"
  case MessageRelationType_REPLY: return "REPLY"
  }
  return "<UNSET>"
}

func MessageRelationTypeFromString(s string) (MessageRelationType, error) {
  switch s {
  case "FORWARD": return MessageRelationType_FORWARD, nil 
  case "AUTO_REPLY": return MessageRelationType_AUTO_REPLY, nil 
  case "SUBORDINATE": return MessageRelationType_SUBORDINATE, nil 
  case "REPLY": return MessageRelationType_REPLY, nil 
  }
  return MessageRelationType(0), fmt.Errorf("not a valid MessageRelationType string")
}


func MessageRelationTypePtr(v MessageRelationType) *MessageRelationType { return &v }

func (p MessageRelationType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *MessageRelationType) UnmarshalText(text []byte) error {
q, err := MessageRelationTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *MessageRelationType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = MessageRelationType(v)
return nil
}

func (p * MessageRelationType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type RelatedMessageServiceCode int64
const (
  RelatedMessageServiceCode_UNKNOWN RelatedMessageServiceCode = 0
  RelatedMessageServiceCode_TALK RelatedMessageServiceCode = 1
  RelatedMessageServiceCode_SQUARE RelatedMessageServiceCode = 2
)

func (p RelatedMessageServiceCode) String() string {
  switch p {
  case RelatedMessageServiceCode_UNKNOWN: return "UNKNOWN"
  case RelatedMessageServiceCode_TALK: return "TALK"
  case RelatedMessageServiceCode_SQUARE: return "SQUARE"
  }
  return "<UNSET>"
}

func RelatedMessageServiceCodeFromString(s string) (RelatedMessageServiceCode, error) {
  switch s {
  case "UNKNOWN": return RelatedMessageServiceCode_UNKNOWN, nil 
  case "TALK": return RelatedMessageServiceCode_TALK, nil 
  case "SQUARE": return RelatedMessageServiceCode_SQUARE, nil 
  }
  return RelatedMessageServiceCode(0), fmt.Errorf("not a valid RelatedMessageServiceCode string")
}


func RelatedMessageServiceCodePtr(v RelatedMessageServiceCode) *RelatedMessageServiceCode { return &v }

func (p RelatedMessageServiceCode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *RelatedMessageServiceCode) UnmarshalText(text []byte) error {
q, err := RelatedMessageServiceCodeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *RelatedMessageServiceCode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = RelatedMessageServiceCode(v)
return nil
}

func (p * RelatedMessageServiceCode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type AppExtensionType int64
const (
  AppExtensionType_SIRI AppExtensionType = 1
  AppExtensionType_GOOGLE_ASSISTANT AppExtensionType = 2
  AppExtensionType_OS_SHARE AppExtensionType = 3
)

func (p AppExtensionType) String() string {
  switch p {
  case AppExtensionType_SIRI: return "SIRI"
  case AppExtensionType_GOOGLE_ASSISTANT: return "GOOGLE_ASSISTANT"
  case AppExtensionType_OS_SHARE: return "OS_SHARE"
  }
  return "<UNSET>"
}

func AppExtensionTypeFromString(s string) (AppExtensionType, error) {
  switch s {
  case "SIRI": return AppExtensionType_SIRI, nil 
  case "GOOGLE_ASSISTANT": return AppExtensionType_GOOGLE_ASSISTANT, nil 
  case "OS_SHARE": return AppExtensionType_OS_SHARE, nil 
  }
  return AppExtensionType(0), fmt.Errorf("not a valid AppExtensionType string")
}


func AppExtensionTypePtr(v AppExtensionType) *AppExtensionType { return &v }

func (p AppExtensionType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *AppExtensionType) UnmarshalText(text []byte) error {
q, err := AppExtensionTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *AppExtensionType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = AppExtensionType(v)
return nil
}

func (p * AppExtensionType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type PredefinedReactionType int64
const (
  PredefinedReactionType_NICE PredefinedReactionType = 2
  PredefinedReactionType_LOVE PredefinedReactionType = 3
  PredefinedReactionType_FUN PredefinedReactionType = 4
  PredefinedReactionType_AMAZING PredefinedReactionType = 5
  PredefinedReactionType_SAD PredefinedReactionType = 6
  PredefinedReactionType_OMG PredefinedReactionType = 7
)

func (p PredefinedReactionType) String() string {
  switch p {
  case PredefinedReactionType_NICE: return "NICE"
  case PredefinedReactionType_LOVE: return "LOVE"
  case PredefinedReactionType_FUN: return "FUN"
  case PredefinedReactionType_AMAZING: return "AMAZING"
  case PredefinedReactionType_SAD: return "SAD"
  case PredefinedReactionType_OMG: return "OMG"
  }
  return "<UNSET>"
}

func PredefinedReactionTypeFromString(s string) (PredefinedReactionType, error) {
  switch s {
  case "NICE": return PredefinedReactionType_NICE, nil 
  case "LOVE": return PredefinedReactionType_LOVE, nil 
  case "FUN": return PredefinedReactionType_FUN, nil 
  case "AMAZING": return PredefinedReactionType_AMAZING, nil 
  case "SAD": return PredefinedReactionType_SAD, nil 
  case "OMG": return PredefinedReactionType_OMG, nil 
  }
  return PredefinedReactionType(0), fmt.Errorf("not a valid PredefinedReactionType string")
}


func PredefinedReactionTypePtr(v PredefinedReactionType) *PredefinedReactionType { return &v }

func (p PredefinedReactionType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *PredefinedReactionType) UnmarshalText(text []byte) error {
q, err := PredefinedReactionTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *PredefinedReactionType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = PredefinedReactionType(v)
return nil
}

func (p * PredefinedReactionType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type MIDType int64
const (
  MIDType_USER MIDType = 0
  MIDType_ROOM MIDType = 1
  MIDType_GROUP MIDType = 2
  MIDType_SQUARE MIDType = 3
  MIDType_SQUARE_CHAT MIDType = 4
  MIDType_SQUARE_MEMBER MIDType = 5
  MIDType_BOT MIDType = 6
)

func (p MIDType) String() string {
  switch p {
  case MIDType_USER: return "USER"
  case MIDType_ROOM: return "ROOM"
  case MIDType_GROUP: return "GROUP"
  case MIDType_SQUARE: return "SQUARE"
  case MIDType_SQUARE_CHAT: return "SQUARE_CHAT"
  case MIDType_SQUARE_MEMBER: return "SQUARE_MEMBER"
  case MIDType_BOT: return "BOT"
  }
  return "<UNSET>"
}

func MIDTypeFromString(s string) (MIDType, error) {
  switch s {
  case "USER": return MIDType_USER, nil 
  case "ROOM": return MIDType_ROOM, nil 
  case "GROUP": return MIDType_GROUP, nil 
  case "SQUARE": return MIDType_SQUARE, nil 
  case "SQUARE_CHAT": return MIDType_SQUARE_CHAT, nil 
  case "SQUARE_MEMBER": return MIDType_SQUARE_MEMBER, nil 
  case "BOT": return MIDType_BOT, nil 
  }
  return MIDType(0), fmt.Errorf("not a valid MIDType string")
}


func MIDTypePtr(v MIDType) *MIDType { return &v }

func (p MIDType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *MIDType) UnmarshalText(text []byte) error {
q, err := MIDTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *MIDType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = MIDType(v)
return nil
}

func (p * MIDType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type SyncTriggerReason int64
const (
  SyncTriggerReason_UNKNOWN SyncTriggerReason = 0
  SyncTriggerReason_REVISION_GAP_TOO_LARGE_CLIENT SyncTriggerReason = 1
  SyncTriggerReason_REVISION_GAP_TOO_LARGE_SERVER SyncTriggerReason = 2
  SyncTriggerReason_OPERATION_EXPIRED SyncTriggerReason = 3
  SyncTriggerReason_REVISION_HOLE SyncTriggerReason = 4
  SyncTriggerReason_FORCE_TRIGGERED SyncTriggerReason = 5
)

func (p SyncTriggerReason) String() string {
  switch p {
  case SyncTriggerReason_UNKNOWN: return "UNKNOWN"
  case SyncTriggerReason_REVISION_GAP_TOO_LARGE_CLIENT: return "REVISION_GAP_TOO_LARGE_CLIENT"
  case SyncTriggerReason_REVISION_GAP_TOO_LARGE_SERVER: return "REVISION_GAP_TOO_LARGE_SERVER"
  case SyncTriggerReason_OPERATION_EXPIRED: return "OPERATION_EXPIRED"
  case SyncTriggerReason_REVISION_HOLE: return "REVISION_HOLE"
  case SyncTriggerReason_FORCE_TRIGGERED: return "FORCE_TRIGGERED"
  }
  return "<UNSET>"
}

func SyncTriggerReasonFromString(s string) (SyncTriggerReason, error) {
  switch s {
  case "UNKNOWN": return SyncTriggerReason_UNKNOWN, nil 
  case "REVISION_GAP_TOO_LARGE_CLIENT": return SyncTriggerReason_REVISION_GAP_TOO_LARGE_CLIENT, nil 
  case "REVISION_GAP_TOO_LARGE_SERVER": return SyncTriggerReason_REVISION_GAP_TOO_LARGE_SERVER, nil 
  case "OPERATION_EXPIRED": return SyncTriggerReason_OPERATION_EXPIRED, nil 
  case "REVISION_HOLE": return SyncTriggerReason_REVISION_HOLE, nil 
  case "FORCE_TRIGGERED": return SyncTriggerReason_FORCE_TRIGGERED, nil 
  }
  return SyncTriggerReason(0), fmt.Errorf("not a valid SyncTriggerReason string")
}


func SyncTriggerReasonPtr(v SyncTriggerReason) *SyncTriggerReason { return &v }

func (p SyncTriggerReason) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *SyncTriggerReason) UnmarshalText(text []byte) error {
q, err := SyncTriggerReasonFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *SyncTriggerReason) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = SyncTriggerReason(v)
return nil
}

func (p * SyncTriggerReason) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type NotificationStatus int64
const (
  NotificationStatus_NOTIFICATION_ITEM_EXIST NotificationStatus = 1
  NotificationStatus_TIMELINE_ITEM_EXIST NotificationStatus = 2
  NotificationStatus_NOTE_GROUP_NEW_ITEM_EXIST NotificationStatus = 4
  NotificationStatus_TIMELINE_BUDDYGROUP_CHANGED NotificationStatus = 8
  NotificationStatus_NOTE_ONE_TO_ONE_NEW_ITEM_EXIST NotificationStatus = 16
  NotificationStatus_ALBUM_ITEM_EXIST NotificationStatus = 32
  NotificationStatus_TIMELINE_ITEM_DELETED NotificationStatus = 64
  NotificationStatus_OTOGROUP_ITEM_EXIST NotificationStatus = 128
  NotificationStatus_GROUPHOME_NEW_ITEM_EXIST NotificationStatus = 256
  NotificationStatus_GROUPHOME_HIDDEN_ITEM_CHANGED NotificationStatus = 512
  NotificationStatus_NOTIFICATION_ITEM_CHANGED NotificationStatus = 1024
  NotificationStatus_BEAD_ITEM_HIDE NotificationStatus = 2048
  NotificationStatus_BEAD_ITEM_SHOW NotificationStatus = 4096
  NotificationStatus_LINE_TICKET_UPDATED NotificationStatus = 8192
  NotificationStatus_TIMELINE_STORY_UPDATED NotificationStatus = 16384
  NotificationStatus_SMARTCH_UPDATED NotificationStatus = 32768
  NotificationStatus_AVATAR_UPDATED NotificationStatus = 65536
  NotificationStatus_HOME_NOTIFICATION_ITEM_EXIST NotificationStatus = 131072
  NotificationStatus_TIMELINE_REBOOT_COMPLETED NotificationStatus = 262144
  NotificationStatus_TIMELINE_GUIDE_STORY_UPDATED NotificationStatus = 524288
)

func (p NotificationStatus) String() string {
  switch p {
  case NotificationStatus_NOTIFICATION_ITEM_EXIST: return "NOTIFICATION_ITEM_EXIST"
  case NotificationStatus_TIMELINE_ITEM_EXIST: return "TIMELINE_ITEM_EXIST"
  case NotificationStatus_NOTE_GROUP_NEW_ITEM_EXIST: return "NOTE_GROUP_NEW_ITEM_EXIST"
  case NotificationStatus_TIMELINE_BUDDYGROUP_CHANGED: return "TIMELINE_BUDDYGROUP_CHANGED"
  case NotificationStatus_NOTE_ONE_TO_ONE_NEW_ITEM_EXIST: return "NOTE_ONE_TO_ONE_NEW_ITEM_EXIST"
  case NotificationStatus_ALBUM_ITEM_EXIST: return "ALBUM_ITEM_EXIST"
  case NotificationStatus_TIMELINE_ITEM_DELETED: return "TIMELINE_ITEM_DELETED"
  case NotificationStatus_OTOGROUP_ITEM_EXIST: return "OTOGROUP_ITEM_EXIST"
  case NotificationStatus_GROUPHOME_NEW_ITEM_EXIST: return "GROUPHOME_NEW_ITEM_EXIST"
  case NotificationStatus_GROUPHOME_HIDDEN_ITEM_CHANGED: return "GROUPHOME_HIDDEN_ITEM_CHANGED"
  case NotificationStatus_NOTIFICATION_ITEM_CHANGED: return "NOTIFICATION_ITEM_CHANGED"
  case NotificationStatus_BEAD_ITEM_HIDE: return "BEAD_ITEM_HIDE"
  case NotificationStatus_BEAD_ITEM_SHOW: return "BEAD_ITEM_SHOW"
  case NotificationStatus_LINE_TICKET_UPDATED: return "LINE_TICKET_UPDATED"
  case NotificationStatus_TIMELINE_STORY_UPDATED: return "TIMELINE_STORY_UPDATED"
  case NotificationStatus_SMARTCH_UPDATED: return "SMARTCH_UPDATED"
  case NotificationStatus_AVATAR_UPDATED: return "AVATAR_UPDATED"
  case NotificationStatus_HOME_NOTIFICATION_ITEM_EXIST: return "HOME_NOTIFICATION_ITEM_EXIST"
  case NotificationStatus_TIMELINE_REBOOT_COMPLETED: return "TIMELINE_REBOOT_COMPLETED"
  case NotificationStatus_TIMELINE_GUIDE_STORY_UPDATED: return "TIMELINE_GUIDE_STORY_UPDATED"
  }
  return "<UNSET>"
}

func NotificationStatusFromString(s string) (NotificationStatus, error) {
  switch s {
  case "NOTIFICATION_ITEM_EXIST": return NotificationStatus_NOTIFICATION_ITEM_EXIST, nil 
  case "TIMELINE_ITEM_EXIST": return NotificationStatus_TIMELINE_ITEM_EXIST, nil 
  case "NOTE_GROUP_NEW_ITEM_EXIST": return NotificationStatus_NOTE_GROUP_NEW_ITEM_EXIST, nil 
  case "TIMELINE_BUDDYGROUP_CHANGED": return NotificationStatus_TIMELINE_BUDDYGROUP_CHANGED, nil 
  case "NOTE_ONE_TO_ONE_NEW_ITEM_EXIST": return NotificationStatus_NOTE_ONE_TO_ONE_NEW_ITEM_EXIST, nil 
  case "ALBUM_ITEM_EXIST": return NotificationStatus_ALBUM_ITEM_EXIST, nil 
  case "TIMELINE_ITEM_DELETED": return NotificationStatus_TIMELINE_ITEM_DELETED, nil 
  case "OTOGROUP_ITEM_EXIST": return NotificationStatus_OTOGROUP_ITEM_EXIST, nil 
  case "GROUPHOME_NEW_ITEM_EXIST": return NotificationStatus_GROUPHOME_NEW_ITEM_EXIST, nil 
  case "GROUPHOME_HIDDEN_ITEM_CHANGED": return NotificationStatus_GROUPHOME_HIDDEN_ITEM_CHANGED, nil 
  case "NOTIFICATION_ITEM_CHANGED": return NotificationStatus_NOTIFICATION_ITEM_CHANGED, nil 
  case "BEAD_ITEM_HIDE": return NotificationStatus_BEAD_ITEM_HIDE, nil 
  case "BEAD_ITEM_SHOW": return NotificationStatus_BEAD_ITEM_SHOW, nil 
  case "LINE_TICKET_UPDATED": return NotificationStatus_LINE_TICKET_UPDATED, nil 
  case "TIMELINE_STORY_UPDATED": return NotificationStatus_TIMELINE_STORY_UPDATED, nil 
  case "SMARTCH_UPDATED": return NotificationStatus_SMARTCH_UPDATED, nil 
  case "AVATAR_UPDATED": return NotificationStatus_AVATAR_UPDATED, nil 
  case "HOME_NOTIFICATION_ITEM_EXIST": return NotificationStatus_HOME_NOTIFICATION_ITEM_EXIST, nil 
  case "TIMELINE_REBOOT_COMPLETED": return NotificationStatus_TIMELINE_REBOOT_COMPLETED, nil 
  case "TIMELINE_GUIDE_STORY_UPDATED": return NotificationStatus_TIMELINE_GUIDE_STORY_UPDATED, nil 
  }
  return NotificationStatus(0), fmt.Errorf("not a valid NotificationStatus string")
}


func NotificationStatusPtr(v NotificationStatus) *NotificationStatus { return &v }

func (p NotificationStatus) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *NotificationStatus) UnmarshalText(text []byte) error {
q, err := NotificationStatusFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *NotificationStatus) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = NotificationStatus(v)
return nil
}

func (p * NotificationStatus) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type GlobalEventType int64
const (
  GlobalEventType_DUMMY GlobalEventType = 0
  GlobalEventType_NOTICE GlobalEventType = 1
  GlobalEventType_MORETAB GlobalEventType = 2
  GlobalEventType_STICKERSHOP GlobalEventType = 3
  GlobalEventType_CHANNEL GlobalEventType = 4
  GlobalEventType_DENY_KEYWORD GlobalEventType = 5
  GlobalEventType_CONNECTIONINFO GlobalEventType = 6
  GlobalEventType_BUDDY GlobalEventType = 7
  GlobalEventType_TIMELINEINFO GlobalEventType = 8
  GlobalEventType_THEMESHOP GlobalEventType = 9
  GlobalEventType_CALLRATE GlobalEventType = 10
  GlobalEventType_CONFIGURATION GlobalEventType = 11
  GlobalEventType_STICONSHOP GlobalEventType = 12
  GlobalEventType_SUGGESTDICTIONARY GlobalEventType = 13
  GlobalEventType_SUGGESTSETTINGS GlobalEventType = 14
  GlobalEventType_USERSETTINGS GlobalEventType = 15
  GlobalEventType_ANALYTICSINFO GlobalEventType = 16
  GlobalEventType_SEARCHPOPULARKEYWORD GlobalEventType = 17
  GlobalEventType_SEARCHNOTICE GlobalEventType = 18
  GlobalEventType_TIMELINE GlobalEventType = 19
  GlobalEventType_SEARCHPOPULARCATEGORY GlobalEventType = 20
  GlobalEventType_EXTENDEDPROFILE GlobalEventType = 21
  GlobalEventType_SEASONALMARKETING GlobalEventType = 22
  GlobalEventType_NEWSTAB GlobalEventType = 23
  GlobalEventType_SUGGESTDICTIONARYV2 GlobalEventType = 24
  GlobalEventType_CHATAPPSYNC GlobalEventType = 25
  GlobalEventType_AGREEMENTS GlobalEventType = 26
  GlobalEventType_INSTANTNEWS GlobalEventType = 27
  GlobalEventType_EMOJI_MAPPING GlobalEventType = 28
  GlobalEventType_SEARCHBARKEYWORDS GlobalEventType = 29
  GlobalEventType_SHOPPING GlobalEventType = 30
  GlobalEventType_CHAT_EFFECT_BACKGROUND GlobalEventType = 31
  GlobalEventType_CHAT_EFFECT_KEYWORD GlobalEventType = 32
  GlobalEventType_SEARCHINDEX GlobalEventType = 33
  GlobalEventType_HUBTAB GlobalEventType = 34
  GlobalEventType_PAY_RULE_UPDATED GlobalEventType = 35
  GlobalEventType_SMARTCH GlobalEventType = 36
  GlobalEventType_HOME_SERVICE_LIST GlobalEventType = 37
  GlobalEventType_TIMELINESTORY GlobalEventType = 38
  GlobalEventType_WALLET_TAB GlobalEventType = 39
  GlobalEventType_POD_TAB GlobalEventType = 40
  GlobalEventType_HOME_SAFETY_CHECK GlobalEventType = 41
)

func (p GlobalEventType) String() string {
  switch p {
  case GlobalEventType_DUMMY: return "DUMMY"
  case GlobalEventType_NOTICE: return "NOTICE"
  case GlobalEventType_MORETAB: return "MORETAB"
  case GlobalEventType_STICKERSHOP: return "STICKERSHOP"
  case GlobalEventType_CHANNEL: return "CHANNEL"
  case GlobalEventType_DENY_KEYWORD: return "DENY_KEYWORD"
  case GlobalEventType_CONNECTIONINFO: return "CONNECTIONINFO"
  case GlobalEventType_BUDDY: return "BUDDY"
  case GlobalEventType_TIMELINEINFO: return "TIMELINEINFO"
  case GlobalEventType_THEMESHOP: return "THEMESHOP"
  case GlobalEventType_CALLRATE: return "CALLRATE"
  case GlobalEventType_CONFIGURATION: return "CONFIGURATION"
  case GlobalEventType_STICONSHOP: return "STICONSHOP"
  case GlobalEventType_SUGGESTDICTIONARY: return "SUGGESTDICTIONARY"
  case GlobalEventType_SUGGESTSETTINGS: return "SUGGESTSETTINGS"
  case GlobalEventType_USERSETTINGS: return "USERSETTINGS"
  case GlobalEventType_ANALYTICSINFO: return "ANALYTICSINFO"
  case GlobalEventType_SEARCHPOPULARKEYWORD: return "SEARCHPOPULARKEYWORD"
  case GlobalEventType_SEARCHNOTICE: return "SEARCHNOTICE"
  case GlobalEventType_TIMELINE: return "TIMELINE"
  case GlobalEventType_SEARCHPOPULARCATEGORY: return "SEARCHPOPULARCATEGORY"
  case GlobalEventType_EXTENDEDPROFILE: return "EXTENDEDPROFILE"
  case GlobalEventType_SEASONALMARKETING: return "SEASONALMARKETING"
  case GlobalEventType_NEWSTAB: return "NEWSTAB"
  case GlobalEventType_SUGGESTDICTIONARYV2: return "SUGGESTDICTIONARYV2"
  case GlobalEventType_CHATAPPSYNC: return "CHATAPPSYNC"
  case GlobalEventType_AGREEMENTS: return "AGREEMENTS"
  case GlobalEventType_INSTANTNEWS: return "INSTANTNEWS"
  case GlobalEventType_EMOJI_MAPPING: return "EMOJI_MAPPING"
  case GlobalEventType_SEARCHBARKEYWORDS: return "SEARCHBARKEYWORDS"
  case GlobalEventType_SHOPPING: return "SHOPPING"
  case GlobalEventType_CHAT_EFFECT_BACKGROUND: return "CHAT_EFFECT_BACKGROUND"
  case GlobalEventType_CHAT_EFFECT_KEYWORD: return "CHAT_EFFECT_KEYWORD"
  case GlobalEventType_SEARCHINDEX: return "SEARCHINDEX"
  case GlobalEventType_HUBTAB: return "HUBTAB"
  case GlobalEventType_PAY_RULE_UPDATED: return "PAY_RULE_UPDATED"
  case GlobalEventType_SMARTCH: return "SMARTCH"
  case GlobalEventType_HOME_SERVICE_LIST: return "HOME_SERVICE_LIST"
  case GlobalEventType_TIMELINESTORY: return "TIMELINESTORY"
  case GlobalEventType_WALLET_TAB: return "WALLET_TAB"
  case GlobalEventType_POD_TAB: return "POD_TAB"
  case GlobalEventType_HOME_SAFETY_CHECK: return "HOME_SAFETY_CHECK"
  }
  return "<UNSET>"
}

func GlobalEventTypeFromString(s string) (GlobalEventType, error) {
  switch s {
  case "DUMMY": return GlobalEventType_DUMMY, nil 
  case "NOTICE": return GlobalEventType_NOTICE, nil 
  case "MORETAB": return GlobalEventType_MORETAB, nil 
  case "STICKERSHOP": return GlobalEventType_STICKERSHOP, nil 
  case "CHANNEL": return GlobalEventType_CHANNEL, nil 
  case "DENY_KEYWORD": return GlobalEventType_DENY_KEYWORD, nil 
  case "CONNECTIONINFO": return GlobalEventType_CONNECTIONINFO, nil 
  case "BUDDY": return GlobalEventType_BUDDY, nil 
  case "TIMELINEINFO": return GlobalEventType_TIMELINEINFO, nil 
  case "THEMESHOP": return GlobalEventType_THEMESHOP, nil 
  case "CALLRATE": return GlobalEventType_CALLRATE, nil 
  case "CONFIGURATION": return GlobalEventType_CONFIGURATION, nil 
  case "STICONSHOP": return GlobalEventType_STICONSHOP, nil 
  case "SUGGESTDICTIONARY": return GlobalEventType_SUGGESTDICTIONARY, nil 
  case "SUGGESTSETTINGS": return GlobalEventType_SUGGESTSETTINGS, nil 
  case "USERSETTINGS": return GlobalEventType_USERSETTINGS, nil 
  case "ANALYTICSINFO": return GlobalEventType_ANALYTICSINFO, nil 
  case "SEARCHPOPULARKEYWORD": return GlobalEventType_SEARCHPOPULARKEYWORD, nil 
  case "SEARCHNOTICE": return GlobalEventType_SEARCHNOTICE, nil 
  case "TIMELINE": return GlobalEventType_TIMELINE, nil 
  case "SEARCHPOPULARCATEGORY": return GlobalEventType_SEARCHPOPULARCATEGORY, nil 
  case "EXTENDEDPROFILE": return GlobalEventType_EXTENDEDPROFILE, nil 
  case "SEASONALMARKETING": return GlobalEventType_SEASONALMARKETING, nil 
  case "NEWSTAB": return GlobalEventType_NEWSTAB, nil 
  case "SUGGESTDICTIONARYV2": return GlobalEventType_SUGGESTDICTIONARYV2, nil 
  case "CHATAPPSYNC": return GlobalEventType_CHATAPPSYNC, nil 
  case "AGREEMENTS": return GlobalEventType_AGREEMENTS, nil 
  case "INSTANTNEWS": return GlobalEventType_INSTANTNEWS, nil 
  case "EMOJI_MAPPING": return GlobalEventType_EMOJI_MAPPING, nil 
  case "SEARCHBARKEYWORDS": return GlobalEventType_SEARCHBARKEYWORDS, nil 
  case "SHOPPING": return GlobalEventType_SHOPPING, nil 
  case "CHAT_EFFECT_BACKGROUND": return GlobalEventType_CHAT_EFFECT_BACKGROUND, nil 
  case "CHAT_EFFECT_KEYWORD": return GlobalEventType_CHAT_EFFECT_KEYWORD, nil 
  case "SEARCHINDEX": return GlobalEventType_SEARCHINDEX, nil 
  case "HUBTAB": return GlobalEventType_HUBTAB, nil 
  case "PAY_RULE_UPDATED": return GlobalEventType_PAY_RULE_UPDATED, nil 
  case "SMARTCH": return GlobalEventType_SMARTCH, nil 
  case "HOME_SERVICE_LIST": return GlobalEventType_HOME_SERVICE_LIST, nil 
  case "TIMELINESTORY": return GlobalEventType_TIMELINESTORY, nil 
  case "WALLET_TAB": return GlobalEventType_WALLET_TAB, nil 
  case "POD_TAB": return GlobalEventType_POD_TAB, nil 
  case "HOME_SAFETY_CHECK": return GlobalEventType_HOME_SAFETY_CHECK, nil 
  }
  return GlobalEventType(0), fmt.Errorf("not a valid GlobalEventType string")
}


func GlobalEventTypePtr(v GlobalEventType) *GlobalEventType { return &v }

func (p GlobalEventType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *GlobalEventType) UnmarshalText(text []byte) error {
q, err := GlobalEventTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *GlobalEventType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = GlobalEventType(v)
return nil
}

func (p * GlobalEventType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type SyncCategories int64
const (
  SyncCategories_ALL SyncCategories = 0
  SyncCategories_PROFILE SyncCategories = 1
  SyncCategories_SETTINGS SyncCategories = 2
  SyncCategories_CONFIGURATIONS SyncCategories = 3
  SyncCategories_CONTACT SyncCategories = 4
  SyncCategories_GROUP SyncCategories = 5
  SyncCategories_E2EE SyncCategories = 6
  SyncCategories_MESSAGE SyncCategories = 7
)

func (p SyncCategories) String() string {
  switch p {
  case SyncCategories_ALL: return "ALL"
  case SyncCategories_PROFILE: return "PROFILE"
  case SyncCategories_SETTINGS: return "SETTINGS"
  case SyncCategories_CONFIGURATIONS: return "CONFIGURATIONS"
  case SyncCategories_CONTACT: return "CONTACT"
  case SyncCategories_GROUP: return "GROUP"
  case SyncCategories_E2EE: return "E2EE"
  case SyncCategories_MESSAGE: return "MESSAGE"
  }
  return "<UNSET>"
}

func SyncCategoriesFromString(s string) (SyncCategories, error) {
  switch s {
  case "ALL": return SyncCategories_ALL, nil 
  case "PROFILE": return SyncCategories_PROFILE, nil 
  case "SETTINGS": return SyncCategories_SETTINGS, nil 
  case "CONFIGURATIONS": return SyncCategories_CONFIGURATIONS, nil 
  case "CONTACT": return SyncCategories_CONTACT, nil 
  case "GROUP": return SyncCategories_GROUP, nil 
  case "E2EE": return SyncCategories_E2EE, nil 
  case "MESSAGE": return SyncCategories_MESSAGE, nil 
  }
  return SyncCategories(0), fmt.Errorf("not a valid SyncCategories string")
}


func SyncCategoriesPtr(v SyncCategories) *SyncCategories { return &v }

func (p SyncCategories) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *SyncCategories) UnmarshalText(text []byte) error {
q, err := SyncCategoriesFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *SyncCategories) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = SyncCategories(v)
return nil
}

func (p * SyncCategories) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type PlaceSearchProvider int64
const (
  PlaceSearchProvider_GOOGLE PlaceSearchProvider = 0
  PlaceSearchProvider_BAIDU PlaceSearchProvider = 1
  PlaceSearchProvider_FOURSQUARE PlaceSearchProvider = 2
)

func (p PlaceSearchProvider) String() string {
  switch p {
  case PlaceSearchProvider_GOOGLE: return "GOOGLE"
  case PlaceSearchProvider_BAIDU: return "BAIDU"
  case PlaceSearchProvider_FOURSQUARE: return "FOURSQUARE"
  }
  return "<UNSET>"
}

func PlaceSearchProviderFromString(s string) (PlaceSearchProvider, error) {
  switch s {
  case "GOOGLE": return PlaceSearchProvider_GOOGLE, nil 
  case "BAIDU": return PlaceSearchProvider_BAIDU, nil 
  case "FOURSQUARE": return PlaceSearchProvider_FOURSQUARE, nil 
  }
  return PlaceSearchProvider(0), fmt.Errorf("not a valid PlaceSearchProvider string")
}


func PlaceSearchProviderPtr(v PlaceSearchProvider) *PlaceSearchProvider { return &v }

func (p PlaceSearchProvider) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *PlaceSearchProvider) UnmarshalText(text []byte) error {
q, err := PlaceSearchProviderFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *PlaceSearchProvider) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = PlaceSearchProvider(v)
return nil
}

func (p * PlaceSearchProvider) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type GeolocationAccuracyMode int64
const (
  GeolocationAccuracyMode_UNKNOWN GeolocationAccuracyMode = 0
  GeolocationAccuracyMode_IOS_REDUCED_ACCURACY GeolocationAccuracyMode = 1
  GeolocationAccuracyMode_IOS_FULL_ACCURACY GeolocationAccuracyMode = 2
  GeolocationAccuracyMode_AOS_PRECISE_LOCATION GeolocationAccuracyMode = 3
  GeolocationAccuracyMode_AOS_APPROXIMATE_LOCATION GeolocationAccuracyMode = 4
)

func (p GeolocationAccuracyMode) String() string {
  switch p {
  case GeolocationAccuracyMode_UNKNOWN: return "UNKNOWN"
  case GeolocationAccuracyMode_IOS_REDUCED_ACCURACY: return "IOS_REDUCED_ACCURACY"
  case GeolocationAccuracyMode_IOS_FULL_ACCURACY: return "IOS_FULL_ACCURACY"
  case GeolocationAccuracyMode_AOS_PRECISE_LOCATION: return "AOS_PRECISE_LOCATION"
  case GeolocationAccuracyMode_AOS_APPROXIMATE_LOCATION: return "AOS_APPROXIMATE_LOCATION"
  }
  return "<UNSET>"
}

func GeolocationAccuracyModeFromString(s string) (GeolocationAccuracyMode, error) {
  switch s {
  case "UNKNOWN": return GeolocationAccuracyMode_UNKNOWN, nil 
  case "IOS_REDUCED_ACCURACY": return GeolocationAccuracyMode_IOS_REDUCED_ACCURACY, nil 
  case "IOS_FULL_ACCURACY": return GeolocationAccuracyMode_IOS_FULL_ACCURACY, nil 
  case "AOS_PRECISE_LOCATION": return GeolocationAccuracyMode_AOS_PRECISE_LOCATION, nil 
  case "AOS_APPROXIMATE_LOCATION": return GeolocationAccuracyMode_AOS_APPROXIMATE_LOCATION, nil 
  }
  return GeolocationAccuracyMode(0), fmt.Errorf("not a valid GeolocationAccuracyMode string")
}


func GeolocationAccuracyModePtr(v GeolocationAccuracyMode) *GeolocationAccuracyMode { return &v }

func (p GeolocationAccuracyMode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *GeolocationAccuracyMode) UnmarshalText(text []byte) error {
q, err := GeolocationAccuracyModeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *GeolocationAccuracyMode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = GeolocationAccuracyMode(v)
return nil
}

func (p * GeolocationAccuracyMode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type OpStatus int64
const (
  OpStatus_NORMAL OpStatus = 0
  OpStatus_ALERT_DISABLED OpStatus = 1
  OpStatus_ALWAYS OpStatus = 2
)

func (p OpStatus) String() string {
  switch p {
  case OpStatus_NORMAL: return "NORMAL"
  case OpStatus_ALERT_DISABLED: return "ALERT_DISABLED"
  case OpStatus_ALWAYS: return "ALWAYS"
  }
  return "<UNSET>"
}

func OpStatusFromString(s string) (OpStatus, error) {
  switch s {
  case "NORMAL": return OpStatus_NORMAL, nil 
  case "ALERT_DISABLED": return OpStatus_ALERT_DISABLED, nil 
  case "ALWAYS": return OpStatus_ALWAYS, nil 
  }
  return OpStatus(0), fmt.Errorf("not a valid OpStatus string")
}


func OpStatusPtr(v OpStatus) *OpStatus { return &v }

func (p OpStatus) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *OpStatus) UnmarshalText(text []byte) error {
q, err := OpStatusFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *OpStatus) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = OpStatus(v)
return nil
}

func (p * OpStatus) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type OpType int32
const (
  OpType_END_OF_OPERATION OpType = 0
  OpType_UPDATE_PROFILE OpType = 1
  OpType_UPDATE_SETTINGS OpType = 36
  OpType_NOTIFIED_UPDATE_PROFILE OpType = 2
  OpType_REGISTER_USERID OpType = 3
  OpType_ADD_CONTACT OpType = 4
  OpType_NOTIFIED_ADD_CONTACT OpType = 5
  OpType_BLOCK_CONTACT OpType = 6
  OpType_UNBLOCK_CONTACT OpType = 7
  OpType_NOTIFIED_RECOMMEND_CONTACT OpType = 8
  OpType_CREATE_GROUP OpType = 9
  OpType_UPDATE_GROUP OpType = 10
  OpType_NOTIFIED_UPDATE_GROUP OpType = 11
  OpType_INVITE_INTO_GROUP OpType = 12
  OpType_NOTIFIED_INVITE_INTO_GROUP OpType = 13
  OpType_CANCEL_INVITATION_GROUP OpType = 31
  OpType_NOTIFIED_CANCEL_INVITATION_GROUP OpType = 32
  OpType_LEAVE_GROUP OpType = 14
  OpType_NOTIFIED_LEAVE_GROUP OpType = 15
  OpType_ACCEPT_GROUP_INVITATION OpType = 16
  OpType_NOTIFIED_ACCEPT_GROUP_INVITATION OpType = 17
  OpType_REJECT_GROUP_INVITATION OpType = 34
  OpType_NOTIFIED_REJECT_GROUP_INVITATION OpType = 35
  OpType_KICKOUT_FROM_GROUP OpType = 18
  OpType_NOTIFIED_KICKOUT_FROM_GROUP OpType = 19
  OpType_CREATE_ROOM OpType = 20
  OpType_INVITE_INTO_ROOM OpType = 21
  OpType_NOTIFIED_INVITE_INTO_ROOM OpType = 22
  OpType_LEAVE_ROOM OpType = 23
  OpType_NOTIFIED_LEAVE_ROOM OpType = 24
  OpType_SEND_MESSAGE OpType = 25
  OpType_RECEIVE_MESSAGE OpType = 26
  OpType_SEND_MESSAGE_RECEIPT OpType = 27
  OpType_RECEIVE_MESSAGE_RECEIPT OpType = 28
  OpType_SEND_CONTENT_RECEIPT OpType = 29
  OpType_SEND_CHAT_CHECKED OpType = 40
  OpType_SEND_CHAT_REMOVED OpType = 41
  OpType_RECEIVE_ANNOUNCEMENT OpType = 30
  OpType_INVITE_VIA_EMAIL OpType = 38
  OpType_NOTIFIED_REGISTER_USER OpType = 37
  OpType_NOTIFIED_UNREGISTER_USER OpType = 33
  OpType_NOTIFIED_REQUEST_RECOVERY OpType = 39
  OpType_NOTIFIED_FORCE_SYNC OpType = 42
  OpType_SEND_CONTENT OpType = 43
  OpType_SEND_MESSAGE_MYHOME OpType = 44
  OpType_NOTIFIED_UPDATE_CONTENT_PREVIEW OpType = 45
  OpType_REMOVE_ALL_MESSAGES OpType = 46
  OpType_NOTIFIED_UPDATE_PURCHASES OpType = 47
  OpType_DUMMY OpType = 48
  OpType_UPDATE_CONTACT OpType = 49
  OpType_NOTIFIED_RECEIVED_CALL OpType = 50
  OpType_CANCEL_CALL OpType = 51
  OpType_NOTIFIED_REDIRECT OpType = 52
  OpType_NOTIFIED_CHANNEL_SYNC OpType = 53
  OpType_FAILED_SEND_MESSAGE OpType = 54
  OpType_NOTIFIED_READ_MESSAGE OpType = 55
  OpType_FAILED_EMAIL_CONFIRMATION OpType = 56
  OpType_NOTIFIED_PUSH_NOTICENTER_ITEM OpType = 59
  OpType_NOTIFIED_CHAT_CONTENT OpType = 58
  OpType_NOTIFIED_JOIN_CHAT OpType = 60
  OpType_NOTIFIED_LEAVE_CHAT OpType = 61
  OpType_NOTIFIED_TYPING OpType = 62
  OpType_FRIEND_REQUEST_ACCEPTED OpType = 63
  OpType_DESTROY_MESSAGE OpType = 64
  OpType_NOTIFIED_DESTROY_MESSAGE OpType = 65
  OpType_UPDATE_PUBLICKEYCHAIN OpType = 66
  OpType_NOTIFIED_UPDATE_PUBLICKEYCHAIN OpType = 67
  OpType_NOTIFIED_BLOCK_CONTACT OpType = 68
  OpType_NOTIFIED_UNBLOCK_CONTACT OpType = 69
  OpType_UPDATE_GROUPPREFERENCE OpType = 70
  OpType_NOTIFIED_PAYMENT_EVENT OpType = 71
  OpType_REGISTER_E2EE_PUBLICKEY OpType = 72
  OpType_NOTIFIED_E2EE_KEY_EXCHANGE_REQ OpType = 73
  OpType_NOTIFIED_E2EE_KEY_EXCHANGE_RESP OpType = 74
  OpType_NOTIFIED_E2EE_MESSAGE_RESEND_REQ OpType = 75
  OpType_NOTIFIED_E2EE_MESSAGE_RESEND_RESP OpType = 76
  OpType_NOTIFIED_E2EE_KEY_UPDATE OpType = 77
  OpType_NOTIFIED_BUDDY_UPDATE_PROFILE OpType = 78
  OpType_NOTIFIED_UPDATE_LINEAT_TABS OpType = 79
  OpType_UPDATE_ROOM OpType = 80
  OpType_NOTIFIED_BEACON_DETECTED OpType = 81
  OpType_UPDATE_EXTENDED_PROFILE OpType = 82
  OpType_ADD_FOLLOW OpType = 83
  OpType_NOTIFIED_ADD_FOLLOW OpType = 84
  OpType_DELETE_FOLLOW OpType = 85
  OpType_NOTIFIED_DELETE_FOLLOW OpType = 86
  OpType_UPDATE_TIMELINE_SETTINGS OpType = 87
  OpType_NOTIFIED_FRIEND_REQUEST OpType = 88
  OpType_UPDATE_RINGBACK_TONE OpType = 89
  OpType_NOTIFIED_POSTBACK OpType = 90
  OpType_RECEIVE_READ_WATERMARK OpType = 91
  OpType_NOTIFIED_MESSAGE_DELIVERED OpType = 92
  OpType_NOTIFIED_UPDATE_CHAT_BAR OpType = 93
  OpType_NOTIFIED_CHATAPP_INSTALLED OpType = 94
  OpType_NOTIFIED_CHATAPP_UPDATED OpType = 95
  OpType_NOTIFIED_CHATAPP_NEW_MARK OpType = 96
  OpType_NOTIFIED_CHATAPP_DELETED OpType = 97
  OpType_NOTIFIED_CHATAPP_SYNC OpType = 98
  OpType_NOTIFIED_UPDATE_MESSAGE OpType = 99
  OpType_UPDATE_CHATROOMBGM OpType = 100
  OpType_NOTIFIED_UPDATE_CHATROOMBGM OpType = 101
  OpType_UPDATE_RINGTONE OpType = 102
  OpType_UPDATE_USER_SETTINGS OpType = 118
  OpType_NOTIFIED_UPDATE_STATUS_BAR OpType = 119
  OpType_CREATE_CHAT OpType = 120
  OpType_UPDATE_CHAT OpType = 121
  OpType_NOTIFIED_UPDATE_CHAT OpType = 122
  OpType_INVITE_INTO_CHAT OpType = 123
  OpType_NOTIFIED_INVITE_INTO_CHAT OpType = 124
  OpType_CANCEL_CHAT_INVITATION OpType = 125
  OpType_NOTIFIED_CANCEL_CHAT_INVITATION OpType = 126
  OpType_DELETE_SELF_FROM_CHAT OpType = 127
  OpType_NOTIFIED_DELETE_SELF_FROM_CHAT OpType = 128
  OpType_ACCEPT_CHAT_INVITATION OpType = 129
  OpType_NOTIFIED_ACCEPT_CHAT_INVITATION OpType = 130
  OpType_REJECT_CHAT_INVITATION OpType = 131
  OpType_DELETE_OTHER_FROM_CHAT OpType = 132
  OpType_NOTIFIED_DELETE_OTHER_FROM_CHAT OpType = 133
  OpType_NOTIFIED_CONTACT_CALENDAR_EVENT OpType = 134
  OpType_NOTIFIED_CONTACT_CALENDAR_EVENT_ALL OpType = 135
  OpType_UPDATE_THINGS_OPERATIONS OpType = 136
  OpType_SEND_CHAT_HIDDEN OpType = 137
  OpType_CHAT_META_SYNC_ALL OpType = 138
  OpType_SEND_REACTION OpType = 139
  OpType_NOTIFIED_SEND_REACTION OpType = 140
  OpType_NOTIFIED_UPDATE_PROFILE_CONTENT OpType = 141
  OpType_FAILED_DELIVERY_MESSAGE OpType = 142
  OpType_SEND_ENCRYPTED_E2EE_KEY_REQUESTED OpType = 143
)

func (p OpType) String() string {
  switch p {
  case OpType_END_OF_OPERATION: return "END_OF_OPERATION"
  case OpType_UPDATE_PROFILE: return "UPDATE_PROFILE"
  case OpType_UPDATE_SETTINGS: return "UPDATE_SETTINGS"
  case OpType_NOTIFIED_UPDATE_PROFILE: return "NOTIFIED_UPDATE_PROFILE"
  case OpType_REGISTER_USERID: return "REGISTER_USERID"
  case OpType_ADD_CONTACT: return "ADD_CONTACT"
  case OpType_NOTIFIED_ADD_CONTACT: return "NOTIFIED_ADD_CONTACT"
  case OpType_BLOCK_CONTACT: return "BLOCK_CONTACT"
  case OpType_UNBLOCK_CONTACT: return "UNBLOCK_CONTACT"
  case OpType_NOTIFIED_RECOMMEND_CONTACT: return "NOTIFIED_RECOMMEND_CONTACT"
  case OpType_CREATE_GROUP: return "CREATE_GROUP"
  case OpType_UPDATE_GROUP: return "UPDATE_GROUP"
  case OpType_NOTIFIED_UPDATE_GROUP: return "NOTIFIED_UPDATE_GROUP"
  case OpType_INVITE_INTO_GROUP: return "INVITE_INTO_GROUP"
  case OpType_NOTIFIED_INVITE_INTO_GROUP: return "NOTIFIED_INVITE_INTO_GROUP"
  case OpType_CANCEL_INVITATION_GROUP: return "CANCEL_INVITATION_GROUP"
  case OpType_NOTIFIED_CANCEL_INVITATION_GROUP: return "NOTIFIED_CANCEL_INVITATION_GROUP"
  case OpType_LEAVE_GROUP: return "LEAVE_GROUP"
  case OpType_NOTIFIED_LEAVE_GROUP: return "NOTIFIED_LEAVE_GROUP"
  case OpType_ACCEPT_GROUP_INVITATION: return "ACCEPT_GROUP_INVITATION"
  case OpType_NOTIFIED_ACCEPT_GROUP_INVITATION: return "NOTIFIED_ACCEPT_GROUP_INVITATION"
  case OpType_REJECT_GROUP_INVITATION: return "REJECT_GROUP_INVITATION"
  case OpType_NOTIFIED_REJECT_GROUP_INVITATION: return "NOTIFIED_REJECT_GROUP_INVITATION"
  case OpType_KICKOUT_FROM_GROUP: return "KICKOUT_FROM_GROUP"
  case OpType_NOTIFIED_KICKOUT_FROM_GROUP: return "NOTIFIED_KICKOUT_FROM_GROUP"
  case OpType_CREATE_ROOM: return "CREATE_ROOM"
  case OpType_INVITE_INTO_ROOM: return "INVITE_INTO_ROOM"
  case OpType_NOTIFIED_INVITE_INTO_ROOM: return "NOTIFIED_INVITE_INTO_ROOM"
  case OpType_LEAVE_ROOM: return "LEAVE_ROOM"
  case OpType_NOTIFIED_LEAVE_ROOM: return "NOTIFIED_LEAVE_ROOM"
  case OpType_SEND_MESSAGE: return "SEND_MESSAGE"
  case OpType_RECEIVE_MESSAGE: return "RECEIVE_MESSAGE"
  case OpType_SEND_MESSAGE_RECEIPT: return "SEND_MESSAGE_RECEIPT"
  case OpType_RECEIVE_MESSAGE_RECEIPT: return "RECEIVE_MESSAGE_RECEIPT"
  case OpType_SEND_CONTENT_RECEIPT: return "SEND_CONTENT_RECEIPT"
  case OpType_SEND_CHAT_CHECKED: return "SEND_CHAT_CHECKED"
  case OpType_SEND_CHAT_REMOVED: return "SEND_CHAT_REMOVED"
  case OpType_RECEIVE_ANNOUNCEMENT: return "RECEIVE_ANNOUNCEMENT"
  case OpType_INVITE_VIA_EMAIL: return "INVITE_VIA_EMAIL"
  case OpType_NOTIFIED_REGISTER_USER: return "NOTIFIED_REGISTER_USER"
  case OpType_NOTIFIED_UNREGISTER_USER: return "NOTIFIED_UNREGISTER_USER"
  case OpType_NOTIFIED_REQUEST_RECOVERY: return "NOTIFIED_REQUEST_RECOVERY"
  case OpType_NOTIFIED_FORCE_SYNC: return "NOTIFIED_FORCE_SYNC"
  case OpType_SEND_CONTENT: return "SEND_CONTENT"
  case OpType_SEND_MESSAGE_MYHOME: return "SEND_MESSAGE_MYHOME"
  case OpType_NOTIFIED_UPDATE_CONTENT_PREVIEW: return "NOTIFIED_UPDATE_CONTENT_PREVIEW"
  case OpType_REMOVE_ALL_MESSAGES: return "REMOVE_ALL_MESSAGES"
  case OpType_NOTIFIED_UPDATE_PURCHASES: return "NOTIFIED_UPDATE_PURCHASES"
  case OpType_DUMMY: return "DUMMY"
  case OpType_UPDATE_CONTACT: return "UPDATE_CONTACT"
  case OpType_NOTIFIED_RECEIVED_CALL: return "NOTIFIED_RECEIVED_CALL"
  case OpType_CANCEL_CALL: return "CANCEL_CALL"
  case OpType_NOTIFIED_REDIRECT: return "NOTIFIED_REDIRECT"
  case OpType_NOTIFIED_CHANNEL_SYNC: return "NOTIFIED_CHANNEL_SYNC"
  case OpType_FAILED_SEND_MESSAGE: return "FAILED_SEND_MESSAGE"
  case OpType_NOTIFIED_READ_MESSAGE: return "NOTIFIED_READ_MESSAGE"
  case OpType_FAILED_EMAIL_CONFIRMATION: return "FAILED_EMAIL_CONFIRMATION"
  case OpType_NOTIFIED_PUSH_NOTICENTER_ITEM: return "NOTIFIED_PUSH_NOTICENTER_ITEM"
  case OpType_NOTIFIED_CHAT_CONTENT: return "NOTIFIED_CHAT_CONTENT"
  case OpType_NOTIFIED_JOIN_CHAT: return "NOTIFIED_JOIN_CHAT"
  case OpType_NOTIFIED_LEAVE_CHAT: return "NOTIFIED_LEAVE_CHAT"
  case OpType_NOTIFIED_TYPING: return "NOTIFIED_TYPING"
  case OpType_FRIEND_REQUEST_ACCEPTED: return "FRIEND_REQUEST_ACCEPTED"
  case OpType_DESTROY_MESSAGE: return "DESTROY_MESSAGE"
  case OpType_NOTIFIED_DESTROY_MESSAGE: return "NOTIFIED_DESTROY_MESSAGE"
  case OpType_UPDATE_PUBLICKEYCHAIN: return "UPDATE_PUBLICKEYCHAIN"
  case OpType_NOTIFIED_UPDATE_PUBLICKEYCHAIN: return "NOTIFIED_UPDATE_PUBLICKEYCHAIN"
  case OpType_NOTIFIED_BLOCK_CONTACT: return "NOTIFIED_BLOCK_CONTACT"
  case OpType_NOTIFIED_UNBLOCK_CONTACT: return "NOTIFIED_UNBLOCK_CONTACT"
  case OpType_UPDATE_GROUPPREFERENCE: return "UPDATE_GROUPPREFERENCE"
  case OpType_NOTIFIED_PAYMENT_EVENT: return "NOTIFIED_PAYMENT_EVENT"
  case OpType_REGISTER_E2EE_PUBLICKEY: return "REGISTER_E2EE_PUBLICKEY"
  case OpType_NOTIFIED_E2EE_KEY_EXCHANGE_REQ: return "NOTIFIED_E2EE_KEY_EXCHANGE_REQ"
  case OpType_NOTIFIED_E2EE_KEY_EXCHANGE_RESP: return "NOTIFIED_E2EE_KEY_EXCHANGE_RESP"
  case OpType_NOTIFIED_E2EE_MESSAGE_RESEND_REQ: return "NOTIFIED_E2EE_MESSAGE_RESEND_REQ"
  case OpType_NOTIFIED_E2EE_MESSAGE_RESEND_RESP: return "NOTIFIED_E2EE_MESSAGE_RESEND_RESP"
  case OpType_NOTIFIED_E2EE_KEY_UPDATE: return "NOTIFIED_E2EE_KEY_UPDATE"
  case OpType_NOTIFIED_BUDDY_UPDATE_PROFILE: return "NOTIFIED_BUDDY_UPDATE_PROFILE"
  case OpType_NOTIFIED_UPDATE_LINEAT_TABS: return "NOTIFIED_UPDATE_LINEAT_TABS"
  case OpType_UPDATE_ROOM: return "UPDATE_ROOM"
  case OpType_NOTIFIED_BEACON_DETECTED: return "NOTIFIED_BEACON_DETECTED"
  case OpType_UPDATE_EXTENDED_PROFILE: return "UPDATE_EXTENDED_PROFILE"
  case OpType_ADD_FOLLOW: return "ADD_FOLLOW"
  case OpType_NOTIFIED_ADD_FOLLOW: return "NOTIFIED_ADD_FOLLOW"
  case OpType_DELETE_FOLLOW: return "DELETE_FOLLOW"
  case OpType_NOTIFIED_DELETE_FOLLOW: return "NOTIFIED_DELETE_FOLLOW"
  case OpType_UPDATE_TIMELINE_SETTINGS: return "UPDATE_TIMELINE_SETTINGS"
  case OpType_NOTIFIED_FRIEND_REQUEST: return "NOTIFIED_FRIEND_REQUEST"
  case OpType_UPDATE_RINGBACK_TONE: return "UPDATE_RINGBACK_TONE"
  case OpType_NOTIFIED_POSTBACK: return "NOTIFIED_POSTBACK"
  case OpType_RECEIVE_READ_WATERMARK: return "RECEIVE_READ_WATERMARK"
  case OpType_NOTIFIED_MESSAGE_DELIVERED: return "NOTIFIED_MESSAGE_DELIVERED"
  case OpType_NOTIFIED_UPDATE_CHAT_BAR: return "NOTIFIED_UPDATE_CHAT_BAR"
  case OpType_NOTIFIED_CHATAPP_INSTALLED: return "NOTIFIED_CHATAPP_INSTALLED"
  case OpType_NOTIFIED_CHATAPP_UPDATED: return "NOTIFIED_CHATAPP_UPDATED"
  case OpType_NOTIFIED_CHATAPP_NEW_MARK: return "NOTIFIED_CHATAPP_NEW_MARK"
  case OpType_NOTIFIED_CHATAPP_DELETED: return "NOTIFIED_CHATAPP_DELETED"
  case OpType_NOTIFIED_CHATAPP_SYNC: return "NOTIFIED_CHATAPP_SYNC"
  case OpType_NOTIFIED_UPDATE_MESSAGE: return "NOTIFIED_UPDATE_MESSAGE"
  case OpType_UPDATE_CHATROOMBGM: return "UPDATE_CHATROOMBGM"
  case OpType_NOTIFIED_UPDATE_CHATROOMBGM: return "NOTIFIED_UPDATE_CHATROOMBGM"
  case OpType_UPDATE_RINGTONE: return "UPDATE_RINGTONE"
  case OpType_UPDATE_USER_SETTINGS: return "UPDATE_USER_SETTINGS"
  case OpType_NOTIFIED_UPDATE_STATUS_BAR: return "NOTIFIED_UPDATE_STATUS_BAR"
  case OpType_CREATE_CHAT: return "CREATE_CHAT"
  case OpType_UPDATE_CHAT: return "UPDATE_CHAT"
  case OpType_NOTIFIED_UPDATE_CHAT: return "NOTIFIED_UPDATE_CHAT"
  case OpType_INVITE_INTO_CHAT: return "INVITE_INTO_CHAT"
  case OpType_NOTIFIED_INVITE_INTO_CHAT: return "NOTIFIED_INVITE_INTO_CHAT"
  case OpType_CANCEL_CHAT_INVITATION: return "CANCEL_CHAT_INVITATION"
  case OpType_NOTIFIED_CANCEL_CHAT_INVITATION: return "NOTIFIED_CANCEL_CHAT_INVITATION"
  case OpType_DELETE_SELF_FROM_CHAT: return "DELETE_SELF_FROM_CHAT"
  case OpType_NOTIFIED_DELETE_SELF_FROM_CHAT: return "NOTIFIED_DELETE_SELF_FROM_CHAT"
  case OpType_ACCEPT_CHAT_INVITATION: return "ACCEPT_CHAT_INVITATION"
  case OpType_NOTIFIED_ACCEPT_CHAT_INVITATION: return "NOTIFIED_ACCEPT_CHAT_INVITATION"
  case OpType_REJECT_CHAT_INVITATION: return "REJECT_CHAT_INVITATION"
  case OpType_DELETE_OTHER_FROM_CHAT: return "DELETE_OTHER_FROM_CHAT"
  case OpType_NOTIFIED_DELETE_OTHER_FROM_CHAT: return "NOTIFIED_DELETE_OTHER_FROM_CHAT"
  case OpType_NOTIFIED_CONTACT_CALENDAR_EVENT: return "NOTIFIED_CONTACT_CALENDAR_EVENT"
  case OpType_NOTIFIED_CONTACT_CALENDAR_EVENT_ALL: return "NOTIFIED_CONTACT_CALENDAR_EVENT_ALL"
  case OpType_UPDATE_THINGS_OPERATIONS: return "UPDATE_THINGS_OPERATIONS"
  case OpType_SEND_CHAT_HIDDEN: return "SEND_CHAT_HIDDEN"
  case OpType_CHAT_META_SYNC_ALL: return "CHAT_META_SYNC_ALL"
  case OpType_SEND_REACTION: return "SEND_REACTION"
  case OpType_NOTIFIED_SEND_REACTION: return "NOTIFIED_SEND_REACTION"
  case OpType_NOTIFIED_UPDATE_PROFILE_CONTENT: return "NOTIFIED_UPDATE_PROFILE_CONTENT"
  case OpType_FAILED_DELIVERY_MESSAGE: return "FAILED_DELIVERY_MESSAGE"
  case OpType_SEND_ENCRYPTED_E2EE_KEY_REQUESTED: return "SEND_ENCRYPTED_E2EE_KEY_REQUESTED"
  }
  return "<UNSET>"
}

func OpTypeFromString(s string) (OpType, error) {
  switch s {
  case "END_OF_OPERATION": return OpType_END_OF_OPERATION, nil 
  case "UPDATE_PROFILE": return OpType_UPDATE_PROFILE, nil 
  case "UPDATE_SETTINGS": return OpType_UPDATE_SETTINGS, nil 
  case "NOTIFIED_UPDATE_PROFILE": return OpType_NOTIFIED_UPDATE_PROFILE, nil 
  case "REGISTER_USERID": return OpType_REGISTER_USERID, nil 
  case "ADD_CONTACT": return OpType_ADD_CONTACT, nil 
  case "NOTIFIED_ADD_CONTACT": return OpType_NOTIFIED_ADD_CONTACT, nil 
  case "BLOCK_CONTACT": return OpType_BLOCK_CONTACT, nil 
  case "UNBLOCK_CONTACT": return OpType_UNBLOCK_CONTACT, nil 
  case "NOTIFIED_RECOMMEND_CONTACT": return OpType_NOTIFIED_RECOMMEND_CONTACT, nil 
  case "CREATE_GROUP": return OpType_CREATE_GROUP, nil 
  case "UPDATE_GROUP": return OpType_UPDATE_GROUP, nil 
  case "NOTIFIED_UPDATE_GROUP": return OpType_NOTIFIED_UPDATE_GROUP, nil 
  case "INVITE_INTO_GROUP": return OpType_INVITE_INTO_GROUP, nil 
  case "NOTIFIED_INVITE_INTO_GROUP": return OpType_NOTIFIED_INVITE_INTO_GROUP, nil 
  case "CANCEL_INVITATION_GROUP": return OpType_CANCEL_INVITATION_GROUP, nil 
  case "NOTIFIED_CANCEL_INVITATION_GROUP": return OpType_NOTIFIED_CANCEL_INVITATION_GROUP, nil 
  case "LEAVE_GROUP": return OpType_LEAVE_GROUP, nil 
  case "NOTIFIED_LEAVE_GROUP": return OpType_NOTIFIED_LEAVE_GROUP, nil 
  case "ACCEPT_GROUP_INVITATION": return OpType_ACCEPT_GROUP_INVITATION, nil 
  case "NOTIFIED_ACCEPT_GROUP_INVITATION": return OpType_NOTIFIED_ACCEPT_GROUP_INVITATION, nil 
  case "REJECT_GROUP_INVITATION": return OpType_REJECT_GROUP_INVITATION, nil 
  case "NOTIFIED_REJECT_GROUP_INVITATION": return OpType_NOTIFIED_REJECT_GROUP_INVITATION, nil 
  case "KICKOUT_FROM_GROUP": return OpType_KICKOUT_FROM_GROUP, nil 
  case "NOTIFIED_KICKOUT_FROM_GROUP": return OpType_NOTIFIED_KICKOUT_FROM_GROUP, nil 
  case "CREATE_ROOM": return OpType_CREATE_ROOM, nil 
  case "INVITE_INTO_ROOM": return OpType_INVITE_INTO_ROOM, nil 
  case "NOTIFIED_INVITE_INTO_ROOM": return OpType_NOTIFIED_INVITE_INTO_ROOM, nil 
  case "LEAVE_ROOM": return OpType_LEAVE_ROOM, nil 
  case "NOTIFIED_LEAVE_ROOM": return OpType_NOTIFIED_LEAVE_ROOM, nil 
  case "SEND_MESSAGE": return OpType_SEND_MESSAGE, nil 
  case "RECEIVE_MESSAGE": return OpType_RECEIVE_MESSAGE, nil 
  case "SEND_MESSAGE_RECEIPT": return OpType_SEND_MESSAGE_RECEIPT, nil 
  case "RECEIVE_MESSAGE_RECEIPT": return OpType_RECEIVE_MESSAGE_RECEIPT, nil 
  case "SEND_CONTENT_RECEIPT": return OpType_SEND_CONTENT_RECEIPT, nil 
  case "SEND_CHAT_CHECKED": return OpType_SEND_CHAT_CHECKED, nil 
  case "SEND_CHAT_REMOVED": return OpType_SEND_CHAT_REMOVED, nil 
  case "RECEIVE_ANNOUNCEMENT": return OpType_RECEIVE_ANNOUNCEMENT, nil 
  case "INVITE_VIA_EMAIL": return OpType_INVITE_VIA_EMAIL, nil 
  case "NOTIFIED_REGISTER_USER": return OpType_NOTIFIED_REGISTER_USER, nil 
  case "NOTIFIED_UNREGISTER_USER": return OpType_NOTIFIED_UNREGISTER_USER, nil 
  case "NOTIFIED_REQUEST_RECOVERY": return OpType_NOTIFIED_REQUEST_RECOVERY, nil 
  case "NOTIFIED_FORCE_SYNC": return OpType_NOTIFIED_FORCE_SYNC, nil 
  case "SEND_CONTENT": return OpType_SEND_CONTENT, nil 
  case "SEND_MESSAGE_MYHOME": return OpType_SEND_MESSAGE_MYHOME, nil 
  case "NOTIFIED_UPDATE_CONTENT_PREVIEW": return OpType_NOTIFIED_UPDATE_CONTENT_PREVIEW, nil 
  case "REMOVE_ALL_MESSAGES": return OpType_REMOVE_ALL_MESSAGES, nil 
  case "NOTIFIED_UPDATE_PURCHASES": return OpType_NOTIFIED_UPDATE_PURCHASES, nil 
  case "DUMMY": return OpType_DUMMY, nil 
  case "UPDATE_CONTACT": return OpType_UPDATE_CONTACT, nil 
  case "NOTIFIED_RECEIVED_CALL": return OpType_NOTIFIED_RECEIVED_CALL, nil 
  case "CANCEL_CALL": return OpType_CANCEL_CALL, nil 
  case "NOTIFIED_REDIRECT": return OpType_NOTIFIED_REDIRECT, nil 
  case "NOTIFIED_CHANNEL_SYNC": return OpType_NOTIFIED_CHANNEL_SYNC, nil 
  case "FAILED_SEND_MESSAGE": return OpType_FAILED_SEND_MESSAGE, nil 
  case "NOTIFIED_READ_MESSAGE": return OpType_NOTIFIED_READ_MESSAGE, nil 
  case "FAILED_EMAIL_CONFIRMATION": return OpType_FAILED_EMAIL_CONFIRMATION, nil 
  case "NOTIFIED_PUSH_NOTICENTER_ITEM": return OpType_NOTIFIED_PUSH_NOTICENTER_ITEM, nil 
  case "NOTIFIED_CHAT_CONTENT": return OpType_NOTIFIED_CHAT_CONTENT, nil 
  case "NOTIFIED_JOIN_CHAT": return OpType_NOTIFIED_JOIN_CHAT, nil 
  case "NOTIFIED_LEAVE_CHAT": return OpType_NOTIFIED_LEAVE_CHAT, nil 
  case "NOTIFIED_TYPING": return OpType_NOTIFIED_TYPING, nil 
  case "FRIEND_REQUEST_ACCEPTED": return OpType_FRIEND_REQUEST_ACCEPTED, nil 
  case "DESTROY_MESSAGE": return OpType_DESTROY_MESSAGE, nil 
  case "NOTIFIED_DESTROY_MESSAGE": return OpType_NOTIFIED_DESTROY_MESSAGE, nil 
  case "UPDATE_PUBLICKEYCHAIN": return OpType_UPDATE_PUBLICKEYCHAIN, nil 
  case "NOTIFIED_UPDATE_PUBLICKEYCHAIN": return OpType_NOTIFIED_UPDATE_PUBLICKEYCHAIN, nil 
  case "NOTIFIED_BLOCK_CONTACT": return OpType_NOTIFIED_BLOCK_CONTACT, nil 
  case "NOTIFIED_UNBLOCK_CONTACT": return OpType_NOTIFIED_UNBLOCK_CONTACT, nil 
  case "UPDATE_GROUPPREFERENCE": return OpType_UPDATE_GROUPPREFERENCE, nil 
  case "NOTIFIED_PAYMENT_EVENT": return OpType_NOTIFIED_PAYMENT_EVENT, nil 
  case "REGISTER_E2EE_PUBLICKEY": return OpType_REGISTER_E2EE_PUBLICKEY, nil 
  case "NOTIFIED_E2EE_KEY_EXCHANGE_REQ": return OpType_NOTIFIED_E2EE_KEY_EXCHANGE_REQ, nil 
  case "NOTIFIED_E2EE_KEY_EXCHANGE_RESP": return OpType_NOTIFIED_E2EE_KEY_EXCHANGE_RESP, nil 
  case "NOTIFIED_E2EE_MESSAGE_RESEND_REQ": return OpType_NOTIFIED_E2EE_MESSAGE_RESEND_REQ, nil 
  case "NOTIFIED_E2EE_MESSAGE_RESEND_RESP": return OpType_NOTIFIED_E2EE_MESSAGE_RESEND_RESP, nil 
  case "NOTIFIED_E2EE_KEY_UPDATE": return OpType_NOTIFIED_E2EE_KEY_UPDATE, nil 
  case "NOTIFIED_BUDDY_UPDATE_PROFILE": return OpType_NOTIFIED_BUDDY_UPDATE_PROFILE, nil 
  case "NOTIFIED_UPDATE_LINEAT_TABS": return OpType_NOTIFIED_UPDATE_LINEAT_TABS, nil 
  case "UPDATE_ROOM": return OpType_UPDATE_ROOM, nil 
  case "NOTIFIED_BEACON_DETECTED": return OpType_NOTIFIED_BEACON_DETECTED, nil 
  case "UPDATE_EXTENDED_PROFILE": return OpType_UPDATE_EXTENDED_PROFILE, nil 
  case "ADD_FOLLOW": return OpType_ADD_FOLLOW, nil 
  case "NOTIFIED_ADD_FOLLOW": return OpType_NOTIFIED_ADD_FOLLOW, nil 
  case "DELETE_FOLLOW": return OpType_DELETE_FOLLOW, nil 
  case "NOTIFIED_DELETE_FOLLOW": return OpType_NOTIFIED_DELETE_FOLLOW, nil 
  case "UPDATE_TIMELINE_SETTINGS": return OpType_UPDATE_TIMELINE_SETTINGS, nil 
  case "NOTIFIED_FRIEND_REQUEST": return OpType_NOTIFIED_FRIEND_REQUEST, nil 
  case "UPDATE_RINGBACK_TONE": return OpType_UPDATE_RINGBACK_TONE, nil 
  case "NOTIFIED_POSTBACK": return OpType_NOTIFIED_POSTBACK, nil 
  case "RECEIVE_READ_WATERMARK": return OpType_RECEIVE_READ_WATERMARK, nil 
  case "NOTIFIED_MESSAGE_DELIVERED": return OpType_NOTIFIED_MESSAGE_DELIVERED, nil 
  case "NOTIFIED_UPDATE_CHAT_BAR": return OpType_NOTIFIED_UPDATE_CHAT_BAR, nil 
  case "NOTIFIED_CHATAPP_INSTALLED": return OpType_NOTIFIED_CHATAPP_INSTALLED, nil 
  case "NOTIFIED_CHATAPP_UPDATED": return OpType_NOTIFIED_CHATAPP_UPDATED, nil 
  case "NOTIFIED_CHATAPP_NEW_MARK": return OpType_NOTIFIED_CHATAPP_NEW_MARK, nil 
  case "NOTIFIED_CHATAPP_DELETED": return OpType_NOTIFIED_CHATAPP_DELETED, nil 
  case "NOTIFIED_CHATAPP_SYNC": return OpType_NOTIFIED_CHATAPP_SYNC, nil 
  case "NOTIFIED_UPDATE_MESSAGE": return OpType_NOTIFIED_UPDATE_MESSAGE, nil 
  case "UPDATE_CHATROOMBGM": return OpType_UPDATE_CHATROOMBGM, nil 
  case "NOTIFIED_UPDATE_CHATROOMBGM": return OpType_NOTIFIED_UPDATE_CHATROOMBGM, nil 
  case "UPDATE_RINGTONE": return OpType_UPDATE_RINGTONE, nil 
  case "UPDATE_USER_SETTINGS": return OpType_UPDATE_USER_SETTINGS, nil 
  case "NOTIFIED_UPDATE_STATUS_BAR": return OpType_NOTIFIED_UPDATE_STATUS_BAR, nil 
  case "CREATE_CHAT": return OpType_CREATE_CHAT, nil 
  case "UPDATE_CHAT": return OpType_UPDATE_CHAT, nil 
  case "NOTIFIED_UPDATE_CHAT": return OpType_NOTIFIED_UPDATE_CHAT, nil 
  case "INVITE_INTO_CHAT": return OpType_INVITE_INTO_CHAT, nil 
  case "NOTIFIED_INVITE_INTO_CHAT": return OpType_NOTIFIED_INVITE_INTO_CHAT, nil 
  case "CANCEL_CHAT_INVITATION": return OpType_CANCEL_CHAT_INVITATION, nil 
  case "NOTIFIED_CANCEL_CHAT_INVITATION": return OpType_NOTIFIED_CANCEL_CHAT_INVITATION, nil 
  case "DELETE_SELF_FROM_CHAT": return OpType_DELETE_SELF_FROM_CHAT, nil 
  case "NOTIFIED_DELETE_SELF_FROM_CHAT": return OpType_NOTIFIED_DELETE_SELF_FROM_CHAT, nil 
  case "ACCEPT_CHAT_INVITATION": return OpType_ACCEPT_CHAT_INVITATION, nil 
  case "NOTIFIED_ACCEPT_CHAT_INVITATION": return OpType_NOTIFIED_ACCEPT_CHAT_INVITATION, nil 
  case "REJECT_CHAT_INVITATION": return OpType_REJECT_CHAT_INVITATION, nil 
  case "DELETE_OTHER_FROM_CHAT": return OpType_DELETE_OTHER_FROM_CHAT, nil 
  case "NOTIFIED_DELETE_OTHER_FROM_CHAT": return OpType_NOTIFIED_DELETE_OTHER_FROM_CHAT, nil 
  case "NOTIFIED_CONTACT_CALENDAR_EVENT": return OpType_NOTIFIED_CONTACT_CALENDAR_EVENT, nil 
  case "NOTIFIED_CONTACT_CALENDAR_EVENT_ALL": return OpType_NOTIFIED_CONTACT_CALENDAR_EVENT_ALL, nil 
  case "UPDATE_THINGS_OPERATIONS": return OpType_UPDATE_THINGS_OPERATIONS, nil 
  case "SEND_CHAT_HIDDEN": return OpType_SEND_CHAT_HIDDEN, nil 
  case "CHAT_META_SYNC_ALL": return OpType_CHAT_META_SYNC_ALL, nil 
  case "SEND_REACTION": return OpType_SEND_REACTION, nil 
  case "NOTIFIED_SEND_REACTION": return OpType_NOTIFIED_SEND_REACTION, nil 
  case "NOTIFIED_UPDATE_PROFILE_CONTENT": return OpType_NOTIFIED_UPDATE_PROFILE_CONTENT, nil 
  case "FAILED_DELIVERY_MESSAGE": return OpType_FAILED_DELIVERY_MESSAGE, nil 
  case "SEND_ENCRYPTED_E2EE_KEY_REQUESTED": return OpType_SEND_ENCRYPTED_E2EE_KEY_REQUESTED, nil 
  }
  return OpType(0), fmt.Errorf("not a valid OpType string")
}


func OpTypePtr(v OpType) *OpType { return &v }

func (p OpType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *OpType) UnmarshalText(text []byte) error {
q, err := OpTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *OpType) Scan(value interface{}) error {
v, ok := value.(int32)
if !ok {
return errors.New("Scan value is not int64")
}
*p = OpType(v)
return nil
}

func (p * OpType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int32(*p), nil
}
type ErrorCode int64
const (
  ErrorCode_ILLEGAL_ARGUMENT ErrorCode = 0
  ErrorCode_AUTHENTICATION_FAILED ErrorCode = 1
  ErrorCode_DB_FAILED ErrorCode = 2
  ErrorCode_INVALID_STATE ErrorCode = 3
  ErrorCode_EXCESSIVE_ACCESS ErrorCode = 4
  ErrorCode_NOT_FOUND ErrorCode = 5
  ErrorCode_INVALID_MID ErrorCode = 9
  ErrorCode_NOT_A_MEMBER ErrorCode = 10
  ErrorCode_INVALID_LENGTH ErrorCode = 6
  ErrorCode_NOT_AVAILABLE_USER ErrorCode = 7
  ErrorCode_NOT_AUTHORIZED_DEVICE ErrorCode = 8
  ErrorCode_NOT_AUTHORIZED_SESSION ErrorCode = 14
  ErrorCode_INCOMPATIBLE_APP_VERSION ErrorCode = 11
  ErrorCode_NOT_READY ErrorCode = 12
  ErrorCode_NOT_AVAILABLE_SESSION ErrorCode = 13
  ErrorCode_SYSTEM_ERROR ErrorCode = 15
  ErrorCode_NO_AVAILABLE_VERIFICATION_METHOD ErrorCode = 16
  ErrorCode_NOT_AUTHENTICATED ErrorCode = 17
  ErrorCode_INVALID_IDENTITY_CREDENTIAL ErrorCode = 18
  ErrorCode_NOT_AVAILABLE_IDENTITY_IDENTIFIER ErrorCode = 19
  ErrorCode_INTERNAL_ERROR ErrorCode = 20
  ErrorCode_NO_SUCH_IDENTITY_IDENFIER ErrorCode = 21
  ErrorCode_DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY ErrorCode = 22
  ErrorCode_ILLEGAL_IDENTITY_CREDENTIAL ErrorCode = 23
  ErrorCode_UNKNOWN_CHANNEL ErrorCode = 24
  ErrorCode_NO_SUCH_MESSAGE_BOX ErrorCode = 25
  ErrorCode_NOT_AVAILABLE_MESSAGE_BOX ErrorCode = 26
  ErrorCode_CHANNEL_DOES_NOT_MATCH ErrorCode = 27
  ErrorCode_NOT_YOUR_MESSAGE ErrorCode = 28
  ErrorCode_MESSAGE_DEFINED_ERROR ErrorCode = 29
  ErrorCode_USER_CANNOT_ACCEPT_PRESENTS ErrorCode = 30
  ErrorCode_USER_NOT_STICKER_OWNER ErrorCode = 32
  ErrorCode_MAINTENANCE_ERROR ErrorCode = 33
  ErrorCode_ACCOUNT_NOT_MATCHED ErrorCode = 34
  ErrorCode_ABUSE_BLOCK ErrorCode = 35
  ErrorCode_NOT_FRIEND ErrorCode = 36
  ErrorCode_NOT_ALLOWED_CALL ErrorCode = 37
  ErrorCode_BLOCK_FRIEND ErrorCode = 38
  ErrorCode_INCOMPATIBLE_VOIP_VERSION ErrorCode = 39
  ErrorCode_INVALID_SNS_ACCESS_TOKEN ErrorCode = 40
  ErrorCode_EXTERNAL_SERVICE_NOT_AVAILABLE ErrorCode = 41
  ErrorCode_NOT_ALLOWED_ADD_CONTACT ErrorCode = 42
  ErrorCode_NOT_CERTIFICATED ErrorCode = 43
  ErrorCode_NOT_ALLOWED_SECONDARY_DEVICE ErrorCode = 44
  ErrorCode_INVALID_PIN_CODE ErrorCode = 45
  ErrorCode_NOT_FOUND_IDENTITY_CREDENTIAL ErrorCode = 46
  ErrorCode_EXCEED_FILE_MAX_SIZE ErrorCode = 47
  ErrorCode_EXCEED_DAILY_QUOTA ErrorCode = 48
  ErrorCode_NOT_SUPPORT_SEND_FILE ErrorCode = 49
  ErrorCode_MUST_UPGRADE ErrorCode = 50
  ErrorCode_NOT_AVAILABLE_PIN_CODE_SESSION ErrorCode = 51
  ErrorCode_EXPIRED_REVISION ErrorCode = 52
  ErrorCode_NOT_YET_PHONE_NUMBER ErrorCode = 54
  ErrorCode_BAD_CALL_NUMBER ErrorCode = 55
  ErrorCode_UNAVAILABLE_CALL_NUMBER ErrorCode = 56
  ErrorCode_NOT_SUPPORT_CALL_SERVICE ErrorCode = 57
  ErrorCode_CONGESTION_CONTROL ErrorCode = 58
  ErrorCode_NO_BALANCE ErrorCode = 59
  ErrorCode_NOT_PERMITTED_CALLER_ID ErrorCode = 60
  ErrorCode_NO_CALLER_ID_LIMIT_EXCEEDED ErrorCode = 61
  ErrorCode_CALLER_ID_VERIFICATION_REQUIRED ErrorCode = 62
  ErrorCode_NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED ErrorCode = 63
  ErrorCode_MESSAGE_NOT_FOUND ErrorCode = 64
  ErrorCode_INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT ErrorCode = 65
  ErrorCode_ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED ErrorCode = 66
  ErrorCode_ACCOUNT_MIGRATION_PINCODE_BLOCKED ErrorCode = 67
  ErrorCode_INVALID_PASSWORD_FORMAT ErrorCode = 69
  ErrorCode_FEATURE_RESTRICTED ErrorCode = 70
  ErrorCode_MESSAGE_NOT_DESTRUCTIBLE ErrorCode = 71
  ErrorCode_PAID_CALL_REDEEM_FAILED ErrorCode = 72
  ErrorCode_PREVENTED_JOIN_BY_TICKET ErrorCode = 73
  ErrorCode_SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT ErrorCode = 75
  ErrorCode_SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY ErrorCode = 76
  ErrorCode_SECURITY_CENTER_NOT_VERIFIED ErrorCode = 77
  ErrorCode_SECURITY_CENTER_BLOCKED_BY_SETTING ErrorCode = 78
  ErrorCode_SECURITY_CENTER_BLOCKED ErrorCode = 79
  ErrorCode_TALK_PROXY_EXCEPTION ErrorCode = 80
  ErrorCode_E2EE_INVALID_PROTOCOL ErrorCode = 81
  ErrorCode_E2EE_RETRY_ENCRYPT ErrorCode = 82
  ErrorCode_E2EE_UPDATE_SENDER_KEY ErrorCode = 83
  ErrorCode_E2EE_UPDATE_RECEIVER_KEY ErrorCode = 84
  ErrorCode_E2EE_INVALID_ARGUMENT ErrorCode = 85
  ErrorCode_E2EE_INVALID_VERSION ErrorCode = 86
  ErrorCode_E2EE_SENDER_DISABLED ErrorCode = 87
  ErrorCode_E2EE_RECEIVER_DISABLED ErrorCode = 88
  ErrorCode_E2EE_SENDER_NOT_ALLOWED ErrorCode = 89
  ErrorCode_E2EE_RECEIVER_NOT_ALLOWED ErrorCode = 90
  ErrorCode_E2EE_RESEND_FAIL ErrorCode = 91
  ErrorCode_E2EE_RESEND_OK ErrorCode = 92
  ErrorCode_HITOKOTO_BACKUP_NO_AVAILABLE_DATA ErrorCode = 93
  ErrorCode_E2EE_UPDATE_PRIMARY_DEVICE ErrorCode = 94
  ErrorCode_SUCCESS ErrorCode = 95
  ErrorCode_CANCEL ErrorCode = 96
  ErrorCode_E2EE_PRIMARY_NOT_SUPPORT ErrorCode = 97
  ErrorCode_E2EE_RETRY_PLAIN ErrorCode = 98
  ErrorCode_E2EE_RECREATE_GROUP_KEY ErrorCode = 99
  ErrorCode_E2EE_GROUP_TOO_MANY_MEMBERS ErrorCode = 100
  ErrorCode_SERVER_BUSY ErrorCode = 101
  ErrorCode_NOT_ALLOWED_ADD_FOLLOW ErrorCode = 102
  ErrorCode_INCOMING_FRIEND_REQUEST_LIMIT ErrorCode = 103
  ErrorCode_OUTGOING_FRIEND_REQUEST_LIMIT ErrorCode = 104
  ErrorCode_OUTGOING_FRIEND_REQUEST_QUOTA ErrorCode = 105
  ErrorCode_DUPLICATED ErrorCode = 106
  ErrorCode_BANNED ErrorCode = 107
  ErrorCode_NOT_AN_INVITEE ErrorCode = 108
  ErrorCode_NOT_AN_OUTSIDER ErrorCode = 109
  ErrorCode_EMPTY_GROUP ErrorCode = 111
  ErrorCode_EXCEED_FOLLOW_LIMIT ErrorCode = 112
  ErrorCode_UNSUPPORTED_ACCOUNT_TYPE ErrorCode = 113
  ErrorCode_AGREEMENT_REQUIRED ErrorCode = 114
  ErrorCode_SHOULD_RETRY ErrorCode = 115
  ErrorCode_OVER_MAX_CHATS_PER_USER ErrorCode = 116
  ErrorCode_NOT_AVAILABLE_API ErrorCode = 117
  ErrorCode_INVALID_OTP ErrorCode = 118
  ErrorCode_MUST_REFRESH_V3_TOKEN ErrorCode = 119
  ErrorCode_ALREADY_EXPIRED ErrorCode = 120
  ErrorCode_USER_NOT_STICON_OWNER ErrorCode = 121
  ErrorCode_REFRESH_MEDIA_FLOW ErrorCode = 122
  ErrorCode_EXCEED_FOLLOWER_LIMIT ErrorCode = 123
)

func (p ErrorCode) String() string {
  switch p {
  case ErrorCode_ILLEGAL_ARGUMENT: return "ILLEGAL_ARGUMENT"
  case ErrorCode_AUTHENTICATION_FAILED: return "AUTHENTICATION_FAILED"
  case ErrorCode_DB_FAILED: return "DB_FAILED"
  case ErrorCode_INVALID_STATE: return "INVALID_STATE"
  case ErrorCode_EXCESSIVE_ACCESS: return "EXCESSIVE_ACCESS"
  case ErrorCode_NOT_FOUND: return "NOT_FOUND"
  case ErrorCode_INVALID_MID: return "INVALID_MID"
  case ErrorCode_NOT_A_MEMBER: return "NOT_A_MEMBER"
  case ErrorCode_INVALID_LENGTH: return "INVALID_LENGTH"
  case ErrorCode_NOT_AVAILABLE_USER: return "NOT_AVAILABLE_USER"
  case ErrorCode_NOT_AUTHORIZED_DEVICE: return "NOT_AUTHORIZED_DEVICE"
  case ErrorCode_NOT_AUTHORIZED_SESSION: return "NOT_AUTHORIZED_SESSION"
  case ErrorCode_INCOMPATIBLE_APP_VERSION: return "INCOMPATIBLE_APP_VERSION"
  case ErrorCode_NOT_READY: return "NOT_READY"
  case ErrorCode_NOT_AVAILABLE_SESSION: return "NOT_AVAILABLE_SESSION"
  case ErrorCode_SYSTEM_ERROR: return "SYSTEM_ERROR"
  case ErrorCode_NO_AVAILABLE_VERIFICATION_METHOD: return "NO_AVAILABLE_VERIFICATION_METHOD"
  case ErrorCode_NOT_AUTHENTICATED: return "NOT_AUTHENTICATED"
  case ErrorCode_INVALID_IDENTITY_CREDENTIAL: return "INVALID_IDENTITY_CREDENTIAL"
  case ErrorCode_NOT_AVAILABLE_IDENTITY_IDENTIFIER: return "NOT_AVAILABLE_IDENTITY_IDENTIFIER"
  case ErrorCode_INTERNAL_ERROR: return "INTERNAL_ERROR"
  case ErrorCode_NO_SUCH_IDENTITY_IDENFIER: return "NO_SUCH_IDENTITY_IDENFIER"
  case ErrorCode_DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY: return "DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY"
  case ErrorCode_ILLEGAL_IDENTITY_CREDENTIAL: return "ILLEGAL_IDENTITY_CREDENTIAL"
  case ErrorCode_UNKNOWN_CHANNEL: return "UNKNOWN_CHANNEL"
  case ErrorCode_NO_SUCH_MESSAGE_BOX: return "NO_SUCH_MESSAGE_BOX"
  case ErrorCode_NOT_AVAILABLE_MESSAGE_BOX: return "NOT_AVAILABLE_MESSAGE_BOX"
  case ErrorCode_CHANNEL_DOES_NOT_MATCH: return "CHANNEL_DOES_NOT_MATCH"
  case ErrorCode_NOT_YOUR_MESSAGE: return "NOT_YOUR_MESSAGE"
  case ErrorCode_MESSAGE_DEFINED_ERROR: return "MESSAGE_DEFINED_ERROR"
  case ErrorCode_USER_CANNOT_ACCEPT_PRESENTS: return "USER_CANNOT_ACCEPT_PRESENTS"
  case ErrorCode_USER_NOT_STICKER_OWNER: return "USER_NOT_STICKER_OWNER"
  case ErrorCode_MAINTENANCE_ERROR: return "MAINTENANCE_ERROR"
  case ErrorCode_ACCOUNT_NOT_MATCHED: return "ACCOUNT_NOT_MATCHED"
  case ErrorCode_ABUSE_BLOCK: return "ABUSE_BLOCK"
  case ErrorCode_NOT_FRIEND: return "NOT_FRIEND"
  case ErrorCode_NOT_ALLOWED_CALL: return "NOT_ALLOWED_CALL"
  case ErrorCode_BLOCK_FRIEND: return "BLOCK_FRIEND"
  case ErrorCode_INCOMPATIBLE_VOIP_VERSION: return "INCOMPATIBLE_VOIP_VERSION"
  case ErrorCode_INVALID_SNS_ACCESS_TOKEN: return "INVALID_SNS_ACCESS_TOKEN"
  case ErrorCode_EXTERNAL_SERVICE_NOT_AVAILABLE: return "EXTERNAL_SERVICE_NOT_AVAILABLE"
  case ErrorCode_NOT_ALLOWED_ADD_CONTACT: return "NOT_ALLOWED_ADD_CONTACT"
  case ErrorCode_NOT_CERTIFICATED: return "NOT_CERTIFICATED"
  case ErrorCode_NOT_ALLOWED_SECONDARY_DEVICE: return "NOT_ALLOWED_SECONDARY_DEVICE"
  case ErrorCode_INVALID_PIN_CODE: return "INVALID_PIN_CODE"
  case ErrorCode_NOT_FOUND_IDENTITY_CREDENTIAL: return "NOT_FOUND_IDENTITY_CREDENTIAL"
  case ErrorCode_EXCEED_FILE_MAX_SIZE: return "EXCEED_FILE_MAX_SIZE"
  case ErrorCode_EXCEED_DAILY_QUOTA: return "EXCEED_DAILY_QUOTA"
  case ErrorCode_NOT_SUPPORT_SEND_FILE: return "NOT_SUPPORT_SEND_FILE"
  case ErrorCode_MUST_UPGRADE: return "MUST_UPGRADE"
  case ErrorCode_NOT_AVAILABLE_PIN_CODE_SESSION: return "NOT_AVAILABLE_PIN_CODE_SESSION"
  case ErrorCode_EXPIRED_REVISION: return "EXPIRED_REVISION"
  case ErrorCode_NOT_YET_PHONE_NUMBER: return "NOT_YET_PHONE_NUMBER"
  case ErrorCode_BAD_CALL_NUMBER: return "BAD_CALL_NUMBER"
  case ErrorCode_UNAVAILABLE_CALL_NUMBER: return "UNAVAILABLE_CALL_NUMBER"
  case ErrorCode_NOT_SUPPORT_CALL_SERVICE: return "NOT_SUPPORT_CALL_SERVICE"
  case ErrorCode_CONGESTION_CONTROL: return "CONGESTION_CONTROL"
  case ErrorCode_NO_BALANCE: return "NO_BALANCE"
  case ErrorCode_NOT_PERMITTED_CALLER_ID: return "NOT_PERMITTED_CALLER_ID"
  case ErrorCode_NO_CALLER_ID_LIMIT_EXCEEDED: return "NO_CALLER_ID_LIMIT_EXCEEDED"
  case ErrorCode_CALLER_ID_VERIFICATION_REQUIRED: return "CALLER_ID_VERIFICATION_REQUIRED"
  case ErrorCode_NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED: return "NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED"
  case ErrorCode_MESSAGE_NOT_FOUND: return "MESSAGE_NOT_FOUND"
  case ErrorCode_INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT: return "INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT"
  case ErrorCode_ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED: return "ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED"
  case ErrorCode_ACCOUNT_MIGRATION_PINCODE_BLOCKED: return "ACCOUNT_MIGRATION_PINCODE_BLOCKED"
  case ErrorCode_INVALID_PASSWORD_FORMAT: return "INVALID_PASSWORD_FORMAT"
  case ErrorCode_FEATURE_RESTRICTED: return "FEATURE_RESTRICTED"
  case ErrorCode_MESSAGE_NOT_DESTRUCTIBLE: return "MESSAGE_NOT_DESTRUCTIBLE"
  case ErrorCode_PAID_CALL_REDEEM_FAILED: return "PAID_CALL_REDEEM_FAILED"
  case ErrorCode_PREVENTED_JOIN_BY_TICKET: return "PREVENTED_JOIN_BY_TICKET"
  case ErrorCode_SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT: return "SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT"
  case ErrorCode_SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY: return "SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY"
  case ErrorCode_SECURITY_CENTER_NOT_VERIFIED: return "SECURITY_CENTER_NOT_VERIFIED"
  case ErrorCode_SECURITY_CENTER_BLOCKED_BY_SETTING: return "SECURITY_CENTER_BLOCKED_BY_SETTING"
  case ErrorCode_SECURITY_CENTER_BLOCKED: return "SECURITY_CENTER_BLOCKED"
  case ErrorCode_TALK_PROXY_EXCEPTION: return "TALK_PROXY_EXCEPTION"
  case ErrorCode_E2EE_INVALID_PROTOCOL: return "E2EE_INVALID_PROTOCOL"
  case ErrorCode_E2EE_RETRY_ENCRYPT: return "E2EE_RETRY_ENCRYPT"
  case ErrorCode_E2EE_UPDATE_SENDER_KEY: return "E2EE_UPDATE_SENDER_KEY"
  case ErrorCode_E2EE_UPDATE_RECEIVER_KEY: return "E2EE_UPDATE_RECEIVER_KEY"
  case ErrorCode_E2EE_INVALID_ARGUMENT: return "E2EE_INVALID_ARGUMENT"
  case ErrorCode_E2EE_INVALID_VERSION: return "E2EE_INVALID_VERSION"
  case ErrorCode_E2EE_SENDER_DISABLED: return "E2EE_SENDER_DISABLED"
  case ErrorCode_E2EE_RECEIVER_DISABLED: return "E2EE_RECEIVER_DISABLED"
  case ErrorCode_E2EE_SENDER_NOT_ALLOWED: return "E2EE_SENDER_NOT_ALLOWED"
  case ErrorCode_E2EE_RECEIVER_NOT_ALLOWED: return "E2EE_RECEIVER_NOT_ALLOWED"
  case ErrorCode_E2EE_RESEND_FAIL: return "E2EE_RESEND_FAIL"
  case ErrorCode_E2EE_RESEND_OK: return "E2EE_RESEND_OK"
  case ErrorCode_HITOKOTO_BACKUP_NO_AVAILABLE_DATA: return "HITOKOTO_BACKUP_NO_AVAILABLE_DATA"
  case ErrorCode_E2EE_UPDATE_PRIMARY_DEVICE: return "E2EE_UPDATE_PRIMARY_DEVICE"
  case ErrorCode_SUCCESS: return "SUCCESS"
  case ErrorCode_CANCEL: return "CANCEL"
  case ErrorCode_E2EE_PRIMARY_NOT_SUPPORT: return "E2EE_PRIMARY_NOT_SUPPORT"
  case ErrorCode_E2EE_RETRY_PLAIN: return "E2EE_RETRY_PLAIN"
  case ErrorCode_E2EE_RECREATE_GROUP_KEY: return "E2EE_RECREATE_GROUP_KEY"
  case ErrorCode_E2EE_GROUP_TOO_MANY_MEMBERS: return "E2EE_GROUP_TOO_MANY_MEMBERS"
  case ErrorCode_SERVER_BUSY: return "SERVER_BUSY"
  case ErrorCode_NOT_ALLOWED_ADD_FOLLOW: return "NOT_ALLOWED_ADD_FOLLOW"
  case ErrorCode_INCOMING_FRIEND_REQUEST_LIMIT: return "INCOMING_FRIEND_REQUEST_LIMIT"
  case ErrorCode_OUTGOING_FRIEND_REQUEST_LIMIT: return "OUTGOING_FRIEND_REQUEST_LIMIT"
  case ErrorCode_OUTGOING_FRIEND_REQUEST_QUOTA: return "OUTGOING_FRIEND_REQUEST_QUOTA"
  case ErrorCode_DUPLICATED: return "DUPLICATED"
  case ErrorCode_BANNED: return "BANNED"
  case ErrorCode_NOT_AN_INVITEE: return "NOT_AN_INVITEE"
  case ErrorCode_NOT_AN_OUTSIDER: return "NOT_AN_OUTSIDER"
  case ErrorCode_EMPTY_GROUP: return "EMPTY_GROUP"
  case ErrorCode_EXCEED_FOLLOW_LIMIT: return "EXCEED_FOLLOW_LIMIT"
  case ErrorCode_UNSUPPORTED_ACCOUNT_TYPE: return "UNSUPPORTED_ACCOUNT_TYPE"
  case ErrorCode_AGREEMENT_REQUIRED: return "AGREEMENT_REQUIRED"
  case ErrorCode_SHOULD_RETRY: return "SHOULD_RETRY"
  case ErrorCode_OVER_MAX_CHATS_PER_USER: return "OVER_MAX_CHATS_PER_USER"
  case ErrorCode_NOT_AVAILABLE_API: return "NOT_AVAILABLE_API"
  case ErrorCode_INVALID_OTP: return "INVALID_OTP"
  case ErrorCode_MUST_REFRESH_V3_TOKEN: return "MUST_REFRESH_V3_TOKEN"
  case ErrorCode_ALREADY_EXPIRED: return "ALREADY_EXPIRED"
  case ErrorCode_USER_NOT_STICON_OWNER: return "USER_NOT_STICON_OWNER"
  case ErrorCode_REFRESH_MEDIA_FLOW: return "REFRESH_MEDIA_FLOW"
  case ErrorCode_EXCEED_FOLLOWER_LIMIT: return "EXCEED_FOLLOWER_LIMIT"
  }
  return "<UNSET>"
}

func ErrorCodeFromString(s string) (ErrorCode, error) {
  switch s {
  case "ILLEGAL_ARGUMENT": return ErrorCode_ILLEGAL_ARGUMENT, nil 
  case "AUTHENTICATION_FAILED": return ErrorCode_AUTHENTICATION_FAILED, nil 
  case "DB_FAILED": return ErrorCode_DB_FAILED, nil 
  case "INVALID_STATE": return ErrorCode_INVALID_STATE, nil 
  case "EXCESSIVE_ACCESS": return ErrorCode_EXCESSIVE_ACCESS, nil 
  case "NOT_FOUND": return ErrorCode_NOT_FOUND, nil 
  case "INVALID_MID": return ErrorCode_INVALID_MID, nil 
  case "NOT_A_MEMBER": return ErrorCode_NOT_A_MEMBER, nil 
  case "INVALID_LENGTH": return ErrorCode_INVALID_LENGTH, nil 
  case "NOT_AVAILABLE_USER": return ErrorCode_NOT_AVAILABLE_USER, nil 
  case "NOT_AUTHORIZED_DEVICE": return ErrorCode_NOT_AUTHORIZED_DEVICE, nil 
  case "NOT_AUTHORIZED_SESSION": return ErrorCode_NOT_AUTHORIZED_SESSION, nil 
  case "INCOMPATIBLE_APP_VERSION": return ErrorCode_INCOMPATIBLE_APP_VERSION, nil 
  case "NOT_READY": return ErrorCode_NOT_READY, nil 
  case "NOT_AVAILABLE_SESSION": return ErrorCode_NOT_AVAILABLE_SESSION, nil 
  case "SYSTEM_ERROR": return ErrorCode_SYSTEM_ERROR, nil 
  case "NO_AVAILABLE_VERIFICATION_METHOD": return ErrorCode_NO_AVAILABLE_VERIFICATION_METHOD, nil 
  case "NOT_AUTHENTICATED": return ErrorCode_NOT_AUTHENTICATED, nil 
  case "INVALID_IDENTITY_CREDENTIAL": return ErrorCode_INVALID_IDENTITY_CREDENTIAL, nil 
  case "NOT_AVAILABLE_IDENTITY_IDENTIFIER": return ErrorCode_NOT_AVAILABLE_IDENTITY_IDENTIFIER, nil 
  case "INTERNAL_ERROR": return ErrorCode_INTERNAL_ERROR, nil 
  case "NO_SUCH_IDENTITY_IDENFIER": return ErrorCode_NO_SUCH_IDENTITY_IDENFIER, nil 
  case "DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY": return ErrorCode_DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY, nil 
  case "ILLEGAL_IDENTITY_CREDENTIAL": return ErrorCode_ILLEGAL_IDENTITY_CREDENTIAL, nil 
  case "UNKNOWN_CHANNEL": return ErrorCode_UNKNOWN_CHANNEL, nil 
  case "NO_SUCH_MESSAGE_BOX": return ErrorCode_NO_SUCH_MESSAGE_BOX, nil 
  case "NOT_AVAILABLE_MESSAGE_BOX": return ErrorCode_NOT_AVAILABLE_MESSAGE_BOX, nil 
  case "CHANNEL_DOES_NOT_MATCH": return ErrorCode_CHANNEL_DOES_NOT_MATCH, nil 
  case "NOT_YOUR_MESSAGE": return ErrorCode_NOT_YOUR_MESSAGE, nil 
  case "MESSAGE_DEFINED_ERROR": return ErrorCode_MESSAGE_DEFINED_ERROR, nil 
  case "USER_CANNOT_ACCEPT_PRESENTS": return ErrorCode_USER_CANNOT_ACCEPT_PRESENTS, nil 
  case "USER_NOT_STICKER_OWNER": return ErrorCode_USER_NOT_STICKER_OWNER, nil 
  case "MAINTENANCE_ERROR": return ErrorCode_MAINTENANCE_ERROR, nil 
  case "ACCOUNT_NOT_MATCHED": return ErrorCode_ACCOUNT_NOT_MATCHED, nil 
  case "ABUSE_BLOCK": return ErrorCode_ABUSE_BLOCK, nil 
  case "NOT_FRIEND": return ErrorCode_NOT_FRIEND, nil 
  case "NOT_ALLOWED_CALL": return ErrorCode_NOT_ALLOWED_CALL, nil 
  case "BLOCK_FRIEND": return ErrorCode_BLOCK_FRIEND, nil 
  case "INCOMPATIBLE_VOIP_VERSION": return ErrorCode_INCOMPATIBLE_VOIP_VERSION, nil 
  case "INVALID_SNS_ACCESS_TOKEN": return ErrorCode_INVALID_SNS_ACCESS_TOKEN, nil 
  case "EXTERNAL_SERVICE_NOT_AVAILABLE": return ErrorCode_EXTERNAL_SERVICE_NOT_AVAILABLE, nil 
  case "NOT_ALLOWED_ADD_CONTACT": return ErrorCode_NOT_ALLOWED_ADD_CONTACT, nil 
  case "NOT_CERTIFICATED": return ErrorCode_NOT_CERTIFICATED, nil 
  case "NOT_ALLOWED_SECONDARY_DEVICE": return ErrorCode_NOT_ALLOWED_SECONDARY_DEVICE, nil 
  case "INVALID_PIN_CODE": return ErrorCode_INVALID_PIN_CODE, nil 
  case "NOT_FOUND_IDENTITY_CREDENTIAL": return ErrorCode_NOT_FOUND_IDENTITY_CREDENTIAL, nil 
  case "EXCEED_FILE_MAX_SIZE": return ErrorCode_EXCEED_FILE_MAX_SIZE, nil 
  case "EXCEED_DAILY_QUOTA": return ErrorCode_EXCEED_DAILY_QUOTA, nil 
  case "NOT_SUPPORT_SEND_FILE": return ErrorCode_NOT_SUPPORT_SEND_FILE, nil 
  case "MUST_UPGRADE": return ErrorCode_MUST_UPGRADE, nil 
  case "NOT_AVAILABLE_PIN_CODE_SESSION": return ErrorCode_NOT_AVAILABLE_PIN_CODE_SESSION, nil 
  case "EXPIRED_REVISION": return ErrorCode_EXPIRED_REVISION, nil 
  case "NOT_YET_PHONE_NUMBER": return ErrorCode_NOT_YET_PHONE_NUMBER, nil 
  case "BAD_CALL_NUMBER": return ErrorCode_BAD_CALL_NUMBER, nil 
  case "UNAVAILABLE_CALL_NUMBER": return ErrorCode_UNAVAILABLE_CALL_NUMBER, nil 
  case "NOT_SUPPORT_CALL_SERVICE": return ErrorCode_NOT_SUPPORT_CALL_SERVICE, nil 
  case "CONGESTION_CONTROL": return ErrorCode_CONGESTION_CONTROL, nil 
  case "NO_BALANCE": return ErrorCode_NO_BALANCE, nil 
  case "NOT_PERMITTED_CALLER_ID": return ErrorCode_NOT_PERMITTED_CALLER_ID, nil 
  case "NO_CALLER_ID_LIMIT_EXCEEDED": return ErrorCode_NO_CALLER_ID_LIMIT_EXCEEDED, nil 
  case "CALLER_ID_VERIFICATION_REQUIRED": return ErrorCode_CALLER_ID_VERIFICATION_REQUIRED, nil 
  case "NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED": return ErrorCode_NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED, nil 
  case "MESSAGE_NOT_FOUND": return ErrorCode_MESSAGE_NOT_FOUND, nil 
  case "INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT": return ErrorCode_INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT, nil 
  case "ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED": return ErrorCode_ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED, nil 
  case "ACCOUNT_MIGRATION_PINCODE_BLOCKED": return ErrorCode_ACCOUNT_MIGRATION_PINCODE_BLOCKED, nil 
  case "INVALID_PASSWORD_FORMAT": return ErrorCode_INVALID_PASSWORD_FORMAT, nil 
  case "FEATURE_RESTRICTED": return ErrorCode_FEATURE_RESTRICTED, nil 
  case "MESSAGE_NOT_DESTRUCTIBLE": return ErrorCode_MESSAGE_NOT_DESTRUCTIBLE, nil 
  case "PAID_CALL_REDEEM_FAILED": return ErrorCode_PAID_CALL_REDEEM_FAILED, nil 
  case "PREVENTED_JOIN_BY_TICKET": return ErrorCode_PREVENTED_JOIN_BY_TICKET, nil 
  case "SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT": return ErrorCode_SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT, nil 
  case "SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY": return ErrorCode_SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY, nil 
  case "SECURITY_CENTER_NOT_VERIFIED": return ErrorCode_SECURITY_CENTER_NOT_VERIFIED, nil 
  case "SECURITY_CENTER_BLOCKED_BY_SETTING": return ErrorCode_SECURITY_CENTER_BLOCKED_BY_SETTING, nil 
  case "SECURITY_CENTER_BLOCKED": return ErrorCode_SECURITY_CENTER_BLOCKED, nil 
  case "TALK_PROXY_EXCEPTION": return ErrorCode_TALK_PROXY_EXCEPTION, nil 
  case "E2EE_INVALID_PROTOCOL": return ErrorCode_E2EE_INVALID_PROTOCOL, nil 
  case "E2EE_RETRY_ENCRYPT": return ErrorCode_E2EE_RETRY_ENCRYPT, nil 
  case "E2EE_UPDATE_SENDER_KEY": return ErrorCode_E2EE_UPDATE_SENDER_KEY, nil 
  case "E2EE_UPDATE_RECEIVER_KEY": return ErrorCode_E2EE_UPDATE_RECEIVER_KEY, nil 
  case "E2EE_INVALID_ARGUMENT": return ErrorCode_E2EE_INVALID_ARGUMENT, nil 
  case "E2EE_INVALID_VERSION": return ErrorCode_E2EE_INVALID_VERSION, nil 
  case "E2EE_SENDER_DISABLED": return ErrorCode_E2EE_SENDER_DISABLED, nil 
  case "E2EE_RECEIVER_DISABLED": return ErrorCode_E2EE_RECEIVER_DISABLED, nil 
  case "E2EE_SENDER_NOT_ALLOWED": return ErrorCode_E2EE_SENDER_NOT_ALLOWED, nil 
  case "E2EE_RECEIVER_NOT_ALLOWED": return ErrorCode_E2EE_RECEIVER_NOT_ALLOWED, nil 
  case "E2EE_RESEND_FAIL": return ErrorCode_E2EE_RESEND_FAIL, nil 
  case "E2EE_RESEND_OK": return ErrorCode_E2EE_RESEND_OK, nil 
  case "HITOKOTO_BACKUP_NO_AVAILABLE_DATA": return ErrorCode_HITOKOTO_BACKUP_NO_AVAILABLE_DATA, nil 
  case "E2EE_UPDATE_PRIMARY_DEVICE": return ErrorCode_E2EE_UPDATE_PRIMARY_DEVICE, nil 
  case "SUCCESS": return ErrorCode_SUCCESS, nil 
  case "CANCEL": return ErrorCode_CANCEL, nil 
  case "E2EE_PRIMARY_NOT_SUPPORT": return ErrorCode_E2EE_PRIMARY_NOT_SUPPORT, nil 
  case "E2EE_RETRY_PLAIN": return ErrorCode_E2EE_RETRY_PLAIN, nil 
  case "E2EE_RECREATE_GROUP_KEY": return ErrorCode_E2EE_RECREATE_GROUP_KEY, nil 
  case "E2EE_GROUP_TOO_MANY_MEMBERS": return ErrorCode_E2EE_GROUP_TOO_MANY_MEMBERS, nil 
  case "SERVER_BUSY": return ErrorCode_SERVER_BUSY, nil 
  case "NOT_ALLOWED_ADD_FOLLOW": return ErrorCode_NOT_ALLOWED_ADD_FOLLOW, nil 
  case "INCOMING_FRIEND_REQUEST_LIMIT": return ErrorCode_INCOMING_FRIEND_REQUEST_LIMIT, nil 
  case "OUTGOING_FRIEND_REQUEST_LIMIT": return ErrorCode_OUTGOING_FRIEND_REQUEST_LIMIT, nil 
  case "OUTGOING_FRIEND_REQUEST_QUOTA": return ErrorCode_OUTGOING_FRIEND_REQUEST_QUOTA, nil 
  case "DUPLICATED": return ErrorCode_DUPLICATED, nil 
  case "BANNED": return ErrorCode_BANNED, nil 
  case "NOT_AN_INVITEE": return ErrorCode_NOT_AN_INVITEE, nil 
  case "NOT_AN_OUTSIDER": return ErrorCode_NOT_AN_OUTSIDER, nil 
  case "EMPTY_GROUP": return ErrorCode_EMPTY_GROUP, nil 
  case "EXCEED_FOLLOW_LIMIT": return ErrorCode_EXCEED_FOLLOW_LIMIT, nil 
  case "UNSUPPORTED_ACCOUNT_TYPE": return ErrorCode_UNSUPPORTED_ACCOUNT_TYPE, nil 
  case "AGREEMENT_REQUIRED": return ErrorCode_AGREEMENT_REQUIRED, nil 
  case "SHOULD_RETRY": return ErrorCode_SHOULD_RETRY, nil 
  case "OVER_MAX_CHATS_PER_USER": return ErrorCode_OVER_MAX_CHATS_PER_USER, nil 
  case "NOT_AVAILABLE_API": return ErrorCode_NOT_AVAILABLE_API, nil 
  case "INVALID_OTP": return ErrorCode_INVALID_OTP, nil 
  case "MUST_REFRESH_V3_TOKEN": return ErrorCode_MUST_REFRESH_V3_TOKEN, nil 
  case "ALREADY_EXPIRED": return ErrorCode_ALREADY_EXPIRED, nil 
  case "USER_NOT_STICON_OWNER": return ErrorCode_USER_NOT_STICON_OWNER, nil 
  case "REFRESH_MEDIA_FLOW": return ErrorCode_REFRESH_MEDIA_FLOW, nil 
  case "EXCEED_FOLLOWER_LIMIT": return ErrorCode_EXCEED_FOLLOWER_LIMIT, nil 
  }
  return ErrorCode(0), fmt.Errorf("not a valid ErrorCode string")
}


func ErrorCodePtr(v ErrorCode) *ErrorCode { return &v }

func (p ErrorCode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ErrorCode) UnmarshalText(text []byte) error {
q, err := ErrorCodeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ErrorCode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ErrorCode(v)
return nil
}

func (p * ErrorCode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - LastRevision
//  - Count
//  - LastGlobalRevision
//  - LastIndividualRevision
//  - FullSyncRequestReason
//  - LastPartialFullSyncs
type SyncRequest struct {
  LastRevision int64 `thrift:"lastRevision,1" db:"lastRevision" json:"lastRevision"`
  Count int32 `thrift:"count,2" db:"count" json:"count"`
  LastGlobalRevision int64 `thrift:"lastGlobalRevision,3" db:"lastGlobalRevision" json:"lastGlobalRevision"`
  LastIndividualRevision int64 `thrift:"lastIndividualRevision,4" db:"lastIndividualRevision" json:"lastIndividualRevision"`
  FullSyncRequestReason int32 `thrift:"fullSyncRequestReason,5" db:"fullSyncRequestReason" json:"fullSyncRequestReason"`
  LastPartialFullSyncs map[int32]int64 `thrift:"lastPartialFullSyncs,6" db:"lastPartialFullSyncs" json:"lastPartialFullSyncs"`
}

func NewSyncRequest() *SyncRequest {
  return &SyncRequest{}
}


func (p *SyncRequest) GetLastRevision() int64 {
  return p.LastRevision
}

func (p *SyncRequest) GetCount() int32 {
  return p.Count
}

func (p *SyncRequest) GetLastGlobalRevision() int64 {
  return p.LastGlobalRevision
}

func (p *SyncRequest) GetLastIndividualRevision() int64 {
  return p.LastIndividualRevision
}

func (p *SyncRequest) GetFullSyncRequestReason() int32 {
  return p.FullSyncRequestReason
}

func (p *SyncRequest) GetLastPartialFullSyncs() map[int32]int64 {
  return p.LastPartialFullSyncs
}
func (p *SyncRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SyncRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.LastRevision = v
}
  return nil
}

func (p *SyncRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *SyncRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.LastGlobalRevision = v
}
  return nil
}

func (p *SyncRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.LastIndividualRevision = v
}
  return nil
}

func (p *SyncRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.FullSyncRequestReason = v
}
  return nil
}

func (p *SyncRequest)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[int32]int64, size)
  p.LastPartialFullSyncs =  tMap
  for i := 0; i < size; i ++ {
var _key0 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key0 = v
}
var _val1 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val1 = v
}
    p.LastPartialFullSyncs[_key0] = _val1
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *SyncRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SyncRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SyncRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastRevision", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:lastRevision: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LastRevision)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastRevision (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:lastRevision: ", p), err) }
  return err
}

func (p *SyncRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "count", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:count: ", p), err) }
  return err
}

func (p *SyncRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastGlobalRevision", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lastGlobalRevision: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LastGlobalRevision)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastGlobalRevision (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lastGlobalRevision: ", p), err) }
  return err
}

func (p *SyncRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastIndividualRevision", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:lastIndividualRevision: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LastIndividualRevision)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastIndividualRevision (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:lastIndividualRevision: ", p), err) }
  return err
}

func (p *SyncRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fullSyncRequestReason", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:fullSyncRequestReason: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.FullSyncRequestReason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fullSyncRequestReason (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:fullSyncRequestReason: ", p), err) }
  return err
}

func (p *SyncRequest) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastPartialFullSyncs", thrift.MAP, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:lastPartialFullSyncs: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.I32, thrift.I64, len(p.LastPartialFullSyncs)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.LastPartialFullSyncs {
    if err := oprot.WriteI32(ctx, int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:lastPartialFullSyncs: ", p), err) }
  return err
}

func (p *SyncRequest) Equals(other *SyncRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.LastRevision != other.LastRevision { return false }
  if p.Count != other.Count { return false }
  if p.LastGlobalRevision != other.LastGlobalRevision { return false }
  if p.LastIndividualRevision != other.LastIndividualRevision { return false }
  if p.FullSyncRequestReason != other.FullSyncRequestReason { return false }
  if len(p.LastPartialFullSyncs) != len(other.LastPartialFullSyncs) { return false }
  for k, _tgt := range p.LastPartialFullSyncs {
    _src2 := other.LastPartialFullSyncs[k]
    if _tgt != _src2 { return false }
  }
  return true
}

func (p *SyncRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SyncRequest(%+v)", *p)
}

func (p *SyncRequest) Validate() error {
  return nil
}
// Attributes:
//  - OperationResponse
//  - FullSyncResponse
//  - PartialFullSyncResponse
type SyncResponse struct {
  OperationResponse *OperationResponse `thrift:"operationResponse,1" db:"operationResponse" json:"1"`
  FullSyncResponse *FullSyncResponse `thrift:"fullSyncResponse,2" db:"fullSyncResponse" json:"2"`
  PartialFullSyncResponse *PartialFullSyncResponse `thrift:"partialFullSyncResponse,3" db:"partialFullSyncResponse" json:"3"`
}

func NewSyncResponse() *SyncResponse {
  return &SyncResponse{}
}

var SyncResponse_OperationResponse_DEFAULT *OperationResponse
func (p *SyncResponse) GetOperationResponse() *OperationResponse {
  if !p.IsSetOperationResponse() {
    return SyncResponse_OperationResponse_DEFAULT
  }
return p.OperationResponse
}
var SyncResponse_FullSyncResponse_DEFAULT *FullSyncResponse
func (p *SyncResponse) GetFullSyncResponse() *FullSyncResponse {
  if !p.IsSetFullSyncResponse() {
    return SyncResponse_FullSyncResponse_DEFAULT
  }
return p.FullSyncResponse
}
var SyncResponse_PartialFullSyncResponse_DEFAULT *PartialFullSyncResponse
func (p *SyncResponse) GetPartialFullSyncResponse() *PartialFullSyncResponse {
  if !p.IsSetPartialFullSyncResponse() {
    return SyncResponse_PartialFullSyncResponse_DEFAULT
  }
return p.PartialFullSyncResponse
}
func (p *SyncResponse) IsSetOperationResponse() bool {
  return p.OperationResponse != nil
}

func (p *SyncResponse) IsSetFullSyncResponse() bool {
  return p.FullSyncResponse != nil
}

func (p *SyncResponse) IsSetPartialFullSyncResponse() bool {
  return p.PartialFullSyncResponse != nil
}

func (p *SyncResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SyncResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.OperationResponse = &OperationResponse{}
  if err := p.OperationResponse.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OperationResponse), err)
  }
  return nil
}

func (p *SyncResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.FullSyncResponse = &FullSyncResponse{}
  if err := p.FullSyncResponse.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FullSyncResponse), err)
  }
  return nil
}

func (p *SyncResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.PartialFullSyncResponse = &PartialFullSyncResponse{}
  if err := p.PartialFullSyncResponse.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PartialFullSyncResponse), err)
  }
  return nil
}

func (p *SyncResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SyncResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SyncResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "operationResponse", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:operationResponse: ", p), err) }
  if err := p.OperationResponse.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OperationResponse), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:operationResponse: ", p), err) }
  return err
}

func (p *SyncResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fullSyncResponse", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fullSyncResponse: ", p), err) }
  if err := p.FullSyncResponse.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FullSyncResponse), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fullSyncResponse: ", p), err) }
  return err
}

func (p *SyncResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "partialFullSyncResponse", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:partialFullSyncResponse: ", p), err) }
  if err := p.PartialFullSyncResponse.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PartialFullSyncResponse), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:partialFullSyncResponse: ", p), err) }
  return err
}

func (p *SyncResponse) Equals(other *SyncResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.OperationResponse.Equals(other.OperationResponse) { return false }
  if !p.FullSyncResponse.Equals(other.FullSyncResponse) { return false }
  if !p.PartialFullSyncResponse.Equals(other.PartialFullSyncResponse) { return false }
  return true
}

func (p *SyncResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SyncResponse(%+v)", *p)
}

func (p *SyncResponse) Validate() error {
  return nil
}
// Attributes:
//  - Operations
//  - HasMoreOps
//  - GlobalEvents
//  - IndividualEvents
type OperationResponse struct {
  Operations []*Operation `thrift:"operations,1" db:"operations" json:"1"`
  HasMoreOps bool `thrift:"hasMoreOps,2" db:"hasMoreOps" json:"2"`
  GlobalEvents *TGlobalEvents `thrift:"globalEvents,3" db:"globalEvents" json:"3"`
  IndividualEvents *TIndividualEvents `thrift:"individualEvents,4" db:"individualEvents" json:"4"`
}

func NewOperationResponse() *OperationResponse {
  return &OperationResponse{}
}


func (p *OperationResponse) GetOperations() []*Operation {
  return p.Operations
}

func (p *OperationResponse) GetHasMoreOps() bool {
  return p.HasMoreOps
}
var OperationResponse_GlobalEvents_DEFAULT *TGlobalEvents
func (p *OperationResponse) GetGlobalEvents() *TGlobalEvents {
  if !p.IsSetGlobalEvents() {
    return OperationResponse_GlobalEvents_DEFAULT
  }
return p.GlobalEvents
}
var OperationResponse_IndividualEvents_DEFAULT *TIndividualEvents
func (p *OperationResponse) GetIndividualEvents() *TIndividualEvents {
  if !p.IsSetIndividualEvents() {
    return OperationResponse_IndividualEvents_DEFAULT
  }
return p.IndividualEvents
}
func (p *OperationResponse) IsSetGlobalEvents() bool {
  return p.GlobalEvents != nil
}

func (p *OperationResponse) IsSetIndividualEvents() bool {
  return p.IndividualEvents != nil
}

func (p *OperationResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OperationResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Operation, 0, size)
  p.Operations =  tSlice
  for i := 0; i < size; i ++ {
    _elem3 := &Operation{}
    if err := _elem3.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
    }
    p.Operations = append(p.Operations, _elem3)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *OperationResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.HasMoreOps = v
}
  return nil
}

func (p *OperationResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.GlobalEvents = &TGlobalEvents{}
  if err := p.GlobalEvents.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GlobalEvents), err)
  }
  return nil
}

func (p *OperationResponse)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.IndividualEvents = &TIndividualEvents{}
  if err := p.IndividualEvents.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IndividualEvents), err)
  }
  return nil
}

func (p *OperationResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "OperationResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OperationResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "operations", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:operations: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Operations)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Operations {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:operations: ", p), err) }
  return err
}

func (p *OperationResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hasMoreOps", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hasMoreOps: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.HasMoreOps)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hasMoreOps (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hasMoreOps: ", p), err) }
  return err
}

func (p *OperationResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "globalEvents", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:globalEvents: ", p), err) }
  if err := p.GlobalEvents.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GlobalEvents), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:globalEvents: ", p), err) }
  return err
}

func (p *OperationResponse) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "individualEvents", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:individualEvents: ", p), err) }
  if err := p.IndividualEvents.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IndividualEvents), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:individualEvents: ", p), err) }
  return err
}

func (p *OperationResponse) Equals(other *OperationResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Operations) != len(other.Operations) { return false }
  for i, _tgt := range p.Operations {
    _src4 := other.Operations[i]
    if !_tgt.Equals(_src4) { return false }
  }
  if p.HasMoreOps != other.HasMoreOps { return false }
  if !p.GlobalEvents.Equals(other.GlobalEvents) { return false }
  if !p.IndividualEvents.Equals(other.IndividualEvents) { return false }
  return true
}

func (p *OperationResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OperationResponse(%+v)", *p)
}

func (p *OperationResponse) Validate() error {
  return nil
}
// Attributes:
//  - Reasons
//  - NextRevision
type FullSyncResponse struct {
  Reasons []SyncTriggerReason `thrift:"reasons,1" db:"reasons" json:"1"`
  NextRevision int64 `thrift:"nextRevision,2" db:"nextRevision" json:"2"`
}

func NewFullSyncResponse() *FullSyncResponse {
  return &FullSyncResponse{}
}


func (p *FullSyncResponse) GetReasons() []SyncTriggerReason {
  return p.Reasons
}

func (p *FullSyncResponse) GetNextRevision() int64 {
  return p.NextRevision
}
func (p *FullSyncResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FullSyncResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]SyncTriggerReason, 0, size)
  p.Reasons =  tSet
  for i := 0; i < size; i ++ {
var _elem5 SyncTriggerReason
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := SyncTriggerReason(v)
    _elem5 = temp
}
    p.Reasons = append(p.Reasons, _elem5)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *FullSyncResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NextRevision = v
}
  return nil
}

func (p *FullSyncResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "FullSyncResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FullSyncResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reasons", thrift.SET, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reasons: ", p), err) }
  if err := oprot.WriteSetBegin(ctx, thrift.I32, len(p.Reasons)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.Reasons); i++ {
    for j := i+1; j<len(p.Reasons); j++ {
      if func(tgt, src SyncTriggerReason) bool {
        if tgt != src { return false }
        return true
      }(p.Reasons[i], p.Reasons[j]) {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Reasons))
      }
    }
  }
  for _, v := range p.Reasons {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(ctx); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reasons: ", p), err) }
  return err
}

func (p *FullSyncResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "nextRevision", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nextRevision: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.NextRevision)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nextRevision (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nextRevision: ", p), err) }
  return err
}

func (p *FullSyncResponse) Equals(other *FullSyncResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Reasons) != len(other.Reasons) { return false }
  for i, _tgt := range p.Reasons {
    _src6 := other.Reasons[i]
    if _tgt != _src6 { return false }
  }
  if p.NextRevision != other.NextRevision { return false }
  return true
}

func (p *FullSyncResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FullSyncResponse(%+v)", *p)
}

func (p *FullSyncResponse) Validate() error {
  return nil
}
// Attributes:
//  - TargetCategories
type PartialFullSyncResponse struct {
  TargetCategories map[SyncCategories]int64 `thrift:"targetCategories,1" db:"targetCategories" json:"1"`
}

func NewPartialFullSyncResponse() *PartialFullSyncResponse {
  return &PartialFullSyncResponse{}
}


func (p *PartialFullSyncResponse) GetTargetCategories() map[SyncCategories]int64 {
  return p.TargetCategories
}
func (p *PartialFullSyncResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PartialFullSyncResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[SyncCategories]int64, size)
  p.TargetCategories =  tMap
  for i := 0; i < size; i ++ {
var _key7 SyncCategories
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := SyncCategories(v)
    _key7 = temp
}
var _val8 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val8 = v
}
    p.TargetCategories[_key7] = _val8
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *PartialFullSyncResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PartialFullSyncResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PartialFullSyncResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "targetCategories", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:targetCategories: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.I32, thrift.I64, len(p.TargetCategories)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.TargetCategories {
    if err := oprot.WriteI32(ctx, int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:targetCategories: ", p), err) }
  return err
}

func (p *PartialFullSyncResponse) Equals(other *PartialFullSyncResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.TargetCategories) != len(other.TargetCategories) { return false }
  for k, _tgt := range p.TargetCategories {
    _src9 := other.TargetCategories[k]
    if _tgt != _src9 { return false }
  }
  return true
}

func (p *PartialFullSyncResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PartialFullSyncResponse(%+v)", *p)
}

func (p *PartialFullSyncResponse) Validate() error {
  return nil
}
// Attributes:
//  - Events
//  - LastRevision
type TGlobalEvents struct {
  Events map[int32]*GlobalEvent `thrift:"events,1" db:"events" json:"1"`
  LastRevision int64 `thrift:"lastRevision,2" db:"lastRevision" json:"2"`
}

func NewTGlobalEvents() *TGlobalEvents {
  return &TGlobalEvents{}
}


func (p *TGlobalEvents) GetEvents() map[int32]*GlobalEvent {
  return p.Events
}

func (p *TGlobalEvents) GetLastRevision() int64 {
  return p.LastRevision
}
func (p *TGlobalEvents) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGlobalEvents)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[int32]*GlobalEvent, size)
  p.Events =  tMap
  for i := 0; i < size; i ++ {
var _key10 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    //temp := GlobalEventType(v)
    _key10 = v
}
    _val11 := &GlobalEvent{}
    if err := _val11.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val11), err)
    }
    p.Events[_key10] = _val11
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TGlobalEvents)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LastRevision = v
}
  return nil
}

func (p *TGlobalEvents) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TGlobalEvents"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGlobalEvents) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "events", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:events: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.I32, thrift.STRUCT, len(p.Events)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Events {
    if err := oprot.WriteI32(ctx, int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:events: ", p), err) }
  return err
}

func (p *TGlobalEvents) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastRevision", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lastRevision: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LastRevision)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastRevision (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lastRevision: ", p), err) }
  return err
}

func (p *TGlobalEvents) Equals(other *TGlobalEvents) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Events) != len(other.Events) { return false }
  for k, _tgt := range p.Events {
    _src12 := other.Events[k]
    if !_tgt.Equals(_src12) { return false }
  }
  if p.LastRevision != other.LastRevision { return false }
  return true
}

func (p *TGlobalEvents) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGlobalEvents(%+v)", *p)
}

func (p *TGlobalEvents) Validate() error {
  return nil
}
// Attributes:
//  - Events
//  - LastRevision
type TIndividualEvents struct {
  Events []NotificationStatus `thrift:"events,1" db:"events" json:"events"`
  LastRevision int64 `thrift:"lastRevision,2" db:"lastRevision" json:"lastRevision"`
}

func NewTIndividualEvents() *TIndividualEvents {
  return &TIndividualEvents{}
}


func (p *TIndividualEvents) GetEvents() []NotificationStatus {
  return p.Events
}

func (p *TIndividualEvents) GetLastRevision() int64 {
  return p.LastRevision
}
func (p *TIndividualEvents) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIndividualEvents)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]NotificationStatus, 0, size)
  p.Events =  tSet
  for i := 0; i < size; i ++ {
var _elem13 NotificationStatus
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := NotificationStatus(v)
    _elem13 = temp
}
    p.Events = append(p.Events, _elem13)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TIndividualEvents)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LastRevision = v
}
  return nil
}

func (p *TIndividualEvents) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TIndividualEvents"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIndividualEvents) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "events", thrift.SET, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:events: ", p), err) }
  if err := oprot.WriteSetBegin(ctx, thrift.I32, len(p.Events)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.Events); i++ {
    for j := i+1; j<len(p.Events); j++ {
      if func(tgt, src NotificationStatus) bool {
        if tgt != src { return false }
        return true
      }(p.Events[i], p.Events[j]) {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Events))
      }
    }
  }
  for _, v := range p.Events {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(ctx); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:events: ", p), err) }
  return err
}

func (p *TIndividualEvents) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastRevision", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lastRevision: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LastRevision)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastRevision (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lastRevision: ", p), err) }
  return err
}

func (p *TIndividualEvents) Equals(other *TIndividualEvents) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Events) != len(other.Events) { return false }
  for i, _tgt := range p.Events {
    _src14 := other.Events[i]
    if _tgt != _src14 { return false }
  }
  if p.LastRevision != other.LastRevision { return false }
  return true
}

func (p *TIndividualEvents) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIndividualEvents(%+v)", *p)
}

func (p *TIndividualEvents) Validate() error {
  return nil
}
// Attributes:
//  - Type
//  - MinDelayInMinutes
//  - MaxDelayInMinutes
//  - CreateTimeMillis
//  - MaxDelayHardLimit
type GlobalEvent struct {
  Type GlobalEventType `thrift:"type,1" db:"type" json:"1"`
  MinDelayInMinutes int32 `thrift:"minDelayInMinutes,2" db:"minDelayInMinutes" json:"2"`
  MaxDelayInMinutes int32 `thrift:"maxDelayInMinutes,3" db:"maxDelayInMinutes" json:"3"`
  CreateTimeMillis int64 `thrift:"createTimeMillis,4" db:"createTimeMillis" json:"4"`
  MaxDelayHardLimit bool `thrift:"maxDelayHardLimit,5" db:"maxDelayHardLimit" json:"5"`
}

func NewGlobalEvent() *GlobalEvent {
  return &GlobalEvent{}
}


func (p *GlobalEvent) GetType() GlobalEventType {
  return p.Type
}

func (p *GlobalEvent) GetMinDelayInMinutes() int32 {
  return p.MinDelayInMinutes
}

func (p *GlobalEvent) GetMaxDelayInMinutes() int32 {
  return p.MaxDelayInMinutes
}

func (p *GlobalEvent) GetCreateTimeMillis() int64 {
  return p.CreateTimeMillis
}

func (p *GlobalEvent) GetMaxDelayHardLimit() bool {
  return p.MaxDelayHardLimit
}
func (p *GlobalEvent) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GlobalEvent)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := GlobalEventType(v)
  p.Type = temp
}
  return nil
}

func (p *GlobalEvent)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MinDelayInMinutes = v
}
  return nil
}

func (p *GlobalEvent)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MaxDelayInMinutes = v
}
  return nil
}

func (p *GlobalEvent)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.CreateTimeMillis = v
}
  return nil
}

func (p *GlobalEvent)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.MaxDelayHardLimit = v
}
  return nil
}

func (p *GlobalEvent) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GlobalEvent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GlobalEvent) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *GlobalEvent) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "minDelayInMinutes", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:minDelayInMinutes: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.MinDelayInMinutes)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.minDelayInMinutes (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:minDelayInMinutes: ", p), err) }
  return err
}

func (p *GlobalEvent) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "maxDelayInMinutes", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:maxDelayInMinutes: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.MaxDelayInMinutes)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.maxDelayInMinutes (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:maxDelayInMinutes: ", p), err) }
  return err
}

func (p *GlobalEvent) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "createTimeMillis", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:createTimeMillis: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.CreateTimeMillis)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createTimeMillis (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:createTimeMillis: ", p), err) }
  return err
}

func (p *GlobalEvent) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "maxDelayHardLimit", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:maxDelayHardLimit: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.MaxDelayHardLimit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.maxDelayHardLimit (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:maxDelayHardLimit: ", p), err) }
  return err
}

func (p *GlobalEvent) Equals(other *GlobalEvent) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Type != other.Type { return false }
  if p.MinDelayInMinutes != other.MinDelayInMinutes { return false }
  if p.MaxDelayInMinutes != other.MaxDelayInMinutes { return false }
  if p.CreateTimeMillis != other.CreateTimeMillis { return false }
  if p.MaxDelayHardLimit != other.MaxDelayHardLimit { return false }
  return true
}

func (p *GlobalEvent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GlobalEvent(%+v)", *p)
}

func (p *GlobalEvent) Validate() error {
  return nil
}
// Attributes:
//  - Revision
//  - CreatedTime
//  - Type
//  - ReqSeq
//  - Checksum
//  - Status
//  - Param1
//  - Param2
//  - Param3
//  - Message
type Operation struct {
  Revision int64 `thrift:"revision,1" db:"revision" json:"1"`
  CreatedTime int64 `thrift:"createdTime,2" db:"createdTime" json:"2"`
  Type int32 `thrift:"type,3" db:"type" json:"3"`
  ReqSeq int32 `thrift:"reqSeq,4" db:"reqSeq" json:"4"`
  Checksum string `thrift:"checksum,5" db:"checksum" json:"5"`
  // unused field # 6
  Status OpStatus `thrift:"status,7" db:"status" json:"7"`
  // unused fields # 8 to 9
  Param1 string `thrift:"param1,10" db:"param1" json:"10"`
  Param2 string `thrift:"param2,11" db:"param2" json:"11"`
  Param3 string `thrift:"param3,12" db:"param3" json:"12"`
  // unused fields # 13 to 19
  Message *Message `thrift:"message,20" db:"message" json:"20"`
}

func NewOperation() *Operation {
  return &Operation{}
}


func (p *Operation) GetRevision() int64 {
  return p.Revision
}

func (p *Operation) GetCreatedTime() int64 {
  return p.CreatedTime
}

func (p *Operation) GetType() int32 {
  return p.Type
}

func (p *Operation) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *Operation) GetChecksum() string {
  return p.Checksum
}

func (p *Operation) GetStatus() OpStatus {
  return p.Status
}

func (p *Operation) GetParam1() string {
  return p.Param1
}

func (p *Operation) GetParam2() string {
  return p.Param2
}

func (p *Operation) GetParam3() string {
  return p.Param3
}
var Operation_Message_DEFAULT *Message
func (p *Operation) GetMessage() *Message {
  if !p.IsSetMessage() {
    return Operation_Message_DEFAULT
  }
return p.Message
}
func (p *Operation) IsSetMessage() bool {
  return p.Message != nil
}

func (p *Operation) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField20(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Operation)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Revision = v
}
  return nil
}

func (p *Operation)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CreatedTime = v
}
  return nil
}

func (p *Operation)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  //temp := OpType(v)
  p.Type = v
}
  return nil
}

func (p *Operation)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *Operation)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Checksum = v
}
  return nil
}

func (p *Operation)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := OpStatus(v)
  p.Status = temp
}
  return nil
}

func (p *Operation)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Param1 = v
}
  return nil
}

func (p *Operation)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Param2 = v
}
  return nil
}

func (p *Operation)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.Param3 = v
}
  return nil
}

func (p *Operation)  ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
  p.Message = &Message{}
  if err := p.Message.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Message), err)
  }
  return nil
}

func (p *Operation) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Operation"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField20(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Operation) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "revision", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:revision: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Revision)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.revision (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:revision: ", p), err) }
  return err
}

func (p *Operation) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "createdTime", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:createdTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.CreatedTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdTime (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:createdTime: ", p), err) }
  return err
}

func (p *Operation) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err) }
  return err
}

func (p *Operation) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:reqSeq: ", p), err) }
  return err
}

func (p *Operation) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "checksum", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:checksum: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Checksum)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.checksum (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:checksum: ", p), err) }
  return err
}

func (p *Operation) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:status: ", p), err) }
  return err
}

func (p *Operation) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "param1", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:param1: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Param1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.param1 (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:param1: ", p), err) }
  return err
}

func (p *Operation) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "param2", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:param2: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Param2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.param2 (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:param2: ", p), err) }
  return err
}

func (p *Operation) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "param3", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:param3: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Param3)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.param3 (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:param3: ", p), err) }
  return err
}

func (p *Operation) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRUCT, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:message: ", p), err) }
  if err := p.Message.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Message), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:message: ", p), err) }
  return err
}

func (p *Operation) Equals(other *Operation) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Revision != other.Revision { return false }
  if p.CreatedTime != other.CreatedTime { return false }
  if p.Type != other.Type { return false }
  if p.ReqSeq != other.ReqSeq { return false }
  if p.Checksum != other.Checksum { return false }
  if p.Status != other.Status { return false }
  if p.Param1 != other.Param1 { return false }
  if p.Param2 != other.Param2 { return false }
  if p.Param3 != other.Param3 { return false }
  if !p.Message.Equals(other.Message) { return false }
  return true
}

func (p *Operation) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Operation(%+v)", *p)
}

func (p *Operation) Validate() error {
  return nil
}
// Attributes:
//  - From_
//  - To
//  - ToType
//  - ID
//  - CreatedTime
//  - DeliveredTime
//  - Text
//  - Location
//  - HasContent
//  - ContentType
//  - ContentPreview
//  - ContentMetadata
//  - SessionId
//  - Chunks
//  - RelatedMessageId
//  - MessageRelationType
//  - ReadCount
//  - RelatedMessageServiceCode
//  - AppExtensionType
//  - Reactions
type Message struct {
  From_ string `thrift:"from_,1" db:"from_" json:"1"`
  To string `thrift:"to,2" db:"to" json:"2"`
  ToType int32 `thrift:"toType,3" db:"toType" json:"3"`
  ID string `thrift:"id,4" db:"id" json:"4"`
  CreatedTime int64 `thrift:"createdTime,5" db:"createdTime" json:"5"`
  DeliveredTime int64 `thrift:"deliveredTime,6" db:"deliveredTime" json:"6"`
  // unused fields # 7 to 9
  Text string `thrift:"text,10" db:"text" json:"10"`
  Location *Location `thrift:"location,11" db:"location" json:"11"`
  // unused fields # 12 to 13
  HasContent bool `thrift:"hasContent,14" db:"hasContent" json:"14"`
  ContentType int32 `thrift:"contentType,15" db:"contentType" json:"15"`
  // unused field # 16
  ContentPreview []byte `thrift:"contentPreview,17" db:"contentPreview" json:"17"`
  ContentMetadata map[string]string `thrift:"contentMetadata,18" db:"contentMetadata" json:"18"`
  SessionId int8 `thrift:"sessionId,19" db:"sessionId" json:"19"`
  Chunks [][]byte `thrift:"chunks,20" db:"chunks" json:"20"`
  RelatedMessageId string `thrift:"relatedMessageId,21" db:"relatedMessageId" json:"21"`
  MessageRelationType int32 `thrift:"messageRelationType,22" db:"messageRelationType" json:"22"`
  ReadCount int64 `thrift:"readCount,23" db:"readCount" json:"23"`
  RelatedMessageServiceCode int32 `thrift:"relatedMessageServiceCode,24" db:"relatedMessageServiceCode" json:"24"`
  AppExtensionType AppExtensionType `thrift:"appExtensionType,25" db:"appExtensionType" json:"25"`
  // unused field # 26
  Reactions []*Reaction `thrift:"reactions,27" db:"reactions" json:"27"`
}

func NewMessage() *Message {
  return &Message{}
}


func (p *Message) GetFrom_() string {
  return p.From_
}

func (p *Message) GetTo() string {
  return p.To
}

func (p *Message) GetToType() int32 {
  return p.ToType
}

func (p *Message) GetID() string {
  return p.ID
}

func (p *Message) GetCreatedTime() int64 {
  return p.CreatedTime
}

func (p *Message) GetDeliveredTime() int64 {
  return p.DeliveredTime
}

func (p *Message) GetText() string {
  return p.Text
}
var Message_Location_DEFAULT *Location
func (p *Message) GetLocation() *Location {
  if !p.IsSetLocation() {
    return Message_Location_DEFAULT
  }
return p.Location
}

func (p *Message) GetHasContent() bool {
  return p.HasContent
}

func (p *Message) GetContentType() int32 {
  return p.ContentType
}

func (p *Message) GetContentPreview() []byte {
  return p.ContentPreview
}

func (p *Message) GetContentMetadata() map[string]string {
  return p.ContentMetadata
}

func (p *Message) GetSessionId() int8 {
  return p.SessionId
}

func (p *Message) GetChunks() [][]byte {
  return p.Chunks
}

func (p *Message) GetRelatedMessageId() string {
  return p.RelatedMessageId
}

func (p *Message) GetMessageRelationType() int32 {
  return p.MessageRelationType
}

func (p *Message) GetReadCount() int64 {
  return p.ReadCount
}

func (p *Message) GetRelatedMessageServiceCode() int32 {
  return p.RelatedMessageServiceCode
}

func (p *Message) GetAppExtensionType() AppExtensionType {
  return p.AppExtensionType
}

func (p *Message) GetReactions() []*Reaction {
  return p.Reactions
}
func (p *Message) IsSetLocation() bool {
  return p.Location != nil
}

func (p *Message) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField15(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField17(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField18(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField19(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField20(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField21(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField22(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField23(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField24(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 25:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField25(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 27:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField27(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Message)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.From_ = v
}
  return nil
}

func (p *Message)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.To = v
}
  return nil
}

func (p *Message)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  //temp := MIDType(v)
  p.ToType = v
}
  return nil
}

func (p *Message)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *Message)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CreatedTime = v
}
  return nil
}

func (p *Message)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.DeliveredTime = v
}
  return nil
}

func (p *Message)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Text = v
}
  return nil
}

func (p *Message)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  p.Location = &Location{}
  if err := p.Location.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Location), err)
  }
  return nil
}

func (p *Message)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.HasContent = v
}
  return nil
}

func (p *Message)  ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  //temp := ContentType(v)
  p.ContentType = v
}
  return nil
}

func (p *Message)  ReadField17(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.ContentPreview = v
}
  return nil
}

func (p *Message)  ReadField18(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.ContentMetadata =  tMap
  for i := 0; i < size; i ++ {
var _key15 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key15 = v
}
var _val16 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val16 = v
}
    p.ContentMetadata[_key15] = _val16
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Message)  ReadField19(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  temp := int8(v)
  p.SessionId = temp
}
  return nil
}

func (p *Message)  ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.Chunks =  tSlice
  for i := 0; i < size; i ++ {
var _elem17 []byte
    if v, err := iprot.ReadBinary(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem17 = v
}
    p.Chunks = append(p.Chunks, _elem17)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Message)  ReadField21(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.RelatedMessageId = v
}
  return nil
}

func (p *Message)  ReadField22(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  //temp := MessageRelationType(v)
  p.MessageRelationType = v
}
  return nil
}

func (p *Message)  ReadField23(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.ReadCount = v
}
  return nil
}

func (p *Message)  ReadField24(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  //temp := RelatedMessageServiceCode(v)
  p.RelatedMessageServiceCode = v
}
  return nil
}

func (p *Message)  ReadField25(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 25: ", err)
} else {
  temp := AppExtensionType(v)
  p.AppExtensionType = temp
}
  return nil
}

func (p *Message)  ReadField27(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Reaction, 0, size)
  p.Reactions =  tSlice
  for i := 0; i < size; i ++ {
    _elem18 := &Reaction{}
    if err := _elem18.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem18), err)
    }
    p.Reactions = append(p.Reactions, _elem18)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Message) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Message"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
    if err := p.writeField15(ctx, oprot); err != nil { return err }
    if err := p.writeField17(ctx, oprot); err != nil { return err }
    if err := p.writeField18(ctx, oprot); err != nil { return err }
    if err := p.writeField19(ctx, oprot); err != nil { return err }
    if err := p.writeField20(ctx, oprot); err != nil { return err }
    if err := p.writeField21(ctx, oprot); err != nil { return err }
    if err := p.writeField22(ctx, oprot); err != nil { return err }
    if err := p.writeField23(ctx, oprot); err != nil { return err }
    if err := p.writeField24(ctx, oprot); err != nil { return err }
    if err := p.writeField25(ctx, oprot); err != nil { return err }
    if err := p.writeField27(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Message) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "from_", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:from_: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.From_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.from_ (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:from_: ", p), err) }
  return err
}

func (p *Message) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "to", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:to: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.To)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.to (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:to: ", p), err) }
  return err
}

func (p *Message) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "toType", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:toType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ToType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.toType (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:toType: ", p), err) }
  return err
}

func (p *Message) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:id: ", p), err) }
  return err
}

func (p *Message) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "createdTime", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:createdTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.CreatedTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdTime (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:createdTime: ", p), err) }
  return err
}

func (p *Message) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "deliveredTime", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:deliveredTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.DeliveredTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deliveredTime (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:deliveredTime: ", p), err) }
  return err
}

func (p *Message) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "text", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:text: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Text)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.text (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:text: ", p), err) }
  return err
}

func (p *Message) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "location", thrift.STRUCT, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:location: ", p), err) }
  if err := p.Location.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Location), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:location: ", p), err) }
  return err
}

func (p *Message) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hasContent", thrift.BOOL, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:hasContent: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.HasContent)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hasContent (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:hasContent: ", p), err) }
  return err
}

func (p *Message) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contentType", thrift.I32, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:contentType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ContentType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.contentType (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:contentType: ", p), err) }
  return err
}

func (p *Message) writeField17(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contentPreview", thrift.STRING, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:contentPreview: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.ContentPreview); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.contentPreview (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:contentPreview: ", p), err) }
  return err
}

func (p *Message) writeField18(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contentMetadata", thrift.MAP, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:contentMetadata: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.ContentMetadata)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.ContentMetadata {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:contentMetadata: ", p), err) }
  return err
}

func (p *Message) writeField19(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sessionId", thrift.BYTE, 19); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:sessionId: ", p), err) }
  if err := oprot.WriteByte(ctx, int8(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (19) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 19:sessionId: ", p), err) }
  return err
}

func (p *Message) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chunks", thrift.LIST, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:chunks: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Chunks)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Chunks {
    if err := oprot.WriteBinary(ctx, v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:chunks: ", p), err) }
  return err
}

func (p *Message) writeField21(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "relatedMessageId", thrift.STRING, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:relatedMessageId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RelatedMessageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.relatedMessageId (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:relatedMessageId: ", p), err) }
  return err
}

func (p *Message) writeField22(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "messageRelationType", thrift.I32, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:messageRelationType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.MessageRelationType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.messageRelationType (22) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:messageRelationType: ", p), err) }
  return err
}

func (p *Message) writeField23(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "readCount", thrift.I64, 23); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:readCount: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReadCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.readCount (23) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 23:readCount: ", p), err) }
  return err
}

func (p *Message) writeField24(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "relatedMessageServiceCode", thrift.I32, 24); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:relatedMessageServiceCode: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.RelatedMessageServiceCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.relatedMessageServiceCode (24) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 24:relatedMessageServiceCode: ", p), err) }
  return err
}

func (p *Message) writeField25(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "appExtensionType", thrift.I32, 25); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:appExtensionType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.AppExtensionType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appExtensionType (25) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 25:appExtensionType: ", p), err) }
  return err
}

func (p *Message) writeField27(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reactions", thrift.LIST, 27); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:reactions: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Reactions)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Reactions {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 27:reactions: ", p), err) }
  return err
}

func (p *Message) Equals(other *Message) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.From_ != other.From_ { return false }
  if p.To != other.To { return false }
  if p.ToType != other.ToType { return false }
  if p.ID != other.ID { return false }
  if p.CreatedTime != other.CreatedTime { return false }
  if p.DeliveredTime != other.DeliveredTime { return false }
  if p.Text != other.Text { return false }
  if !p.Location.Equals(other.Location) { return false }
  if p.HasContent != other.HasContent { return false }
  if p.ContentType != other.ContentType { return false }
  if bytes.Compare(p.ContentPreview, other.ContentPreview) != 0 { return false }
  if len(p.ContentMetadata) != len(other.ContentMetadata) { return false }
  for k, _tgt := range p.ContentMetadata {
    _src19 := other.ContentMetadata[k]
    if _tgt != _src19 { return false }
  }
  if p.SessionId != other.SessionId { return false }
  if len(p.Chunks) != len(other.Chunks) { return false }
  for i, _tgt := range p.Chunks {
    _src20 := other.Chunks[i]
    if bytes.Compare(_tgt, _src20) != 0 { return false }
  }
  if p.RelatedMessageId != other.RelatedMessageId { return false }
  if p.MessageRelationType != other.MessageRelationType { return false }
  if p.ReadCount != other.ReadCount { return false }
  if p.RelatedMessageServiceCode != other.RelatedMessageServiceCode { return false }
  if p.AppExtensionType != other.AppExtensionType { return false }
  if len(p.Reactions) != len(other.Reactions) { return false }
  for i, _tgt := range p.Reactions {
    _src21 := other.Reactions[i]
    if !_tgt.Equals(_src21) { return false }
  }
  return true
}

func (p *Message) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Message(%+v)", *p)
}

func (p *Message) Validate() error {
  return nil
}
// Attributes:
//  - FromUserMid
//  - AtMillis
//  - ReactionType
type Reaction struct {
  FromUserMid string `thrift:"fromUserMid,1" db:"fromUserMid" json:"fromUserMid"`
  AtMillis int64 `thrift:"atMillis,2" db:"atMillis" json:"atMillis"`
  ReactionType *ReactionType `thrift:"reactionType,3" db:"reactionType" json:"reactionType"`
}

func NewReaction() *Reaction {
  return &Reaction{}
}


func (p *Reaction) GetFromUserMid() string {
  return p.FromUserMid
}

func (p *Reaction) GetAtMillis() int64 {
  return p.AtMillis
}
var Reaction_ReactionType_DEFAULT *ReactionType
func (p *Reaction) GetReactionType() *ReactionType {
  if !p.IsSetReactionType() {
    return Reaction_ReactionType_DEFAULT
  }
return p.ReactionType
}
func (p *Reaction) IsSetReactionType() bool {
  return p.ReactionType != nil
}

func (p *Reaction) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Reaction)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.FromUserMid = v
}
  return nil
}

func (p *Reaction)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AtMillis = v
}
  return nil
}

func (p *Reaction)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.ReactionType = &ReactionType{}
  if err := p.ReactionType.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ReactionType), err)
  }
  return nil
}

func (p *Reaction) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Reaction"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Reaction) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fromUserMid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fromUserMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.FromUserMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromUserMid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fromUserMid: ", p), err) }
  return err
}

func (p *Reaction) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "atMillis", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:atMillis: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AtMillis)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.atMillis (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:atMillis: ", p), err) }
  return err
}

func (p *Reaction) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reactionType", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reactionType: ", p), err) }
  if err := p.ReactionType.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ReactionType), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reactionType: ", p), err) }
  return err
}

func (p *Reaction) Equals(other *Reaction) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.FromUserMid != other.FromUserMid { return false }
  if p.AtMillis != other.AtMillis { return false }
  if !p.ReactionType.Equals(other.ReactionType) { return false }
  return true
}

func (p *Reaction) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Reaction(%+v)", *p)
}

func (p *Reaction) Validate() error {
  return nil
}
// Attributes:
//  - PredefinedReactionType
type ReactionType struct {
  PredefinedReactionType PredefinedReactionType `thrift:"predefinedReactionType,1" db:"predefinedReactionType" json:"predefinedReactionType"`
}

func NewReactionType() *ReactionType {
  return &ReactionType{}
}


func (p *ReactionType) GetPredefinedReactionType() PredefinedReactionType {
  return p.PredefinedReactionType
}
func (p *ReactionType) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReactionType)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := PredefinedReactionType(v)
  p.PredefinedReactionType = temp
}
  return nil
}

func (p *ReactionType) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReactionType"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReactionType) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "predefinedReactionType", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:predefinedReactionType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PredefinedReactionType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.predefinedReactionType (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:predefinedReactionType: ", p), err) }
  return err
}

func (p *ReactionType) Equals(other *ReactionType) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.PredefinedReactionType != other.PredefinedReactionType { return false }
  return true
}

func (p *ReactionType) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReactionType(%+v)", *p)
}

func (p *ReactionType) Validate() error {
  return nil
}
// Attributes:
//  - Title
//  - Address
//  - Latitude
//  - Longitude
//  - Phone
//  - CategoryId
//  - Provider
//  - Accuracy
//  - AltitudeMeters
type Location struct {
  Title string `thrift:"title,1" db:"title" json:"1"`
  Address string `thrift:"address,2" db:"address" json:"2"`
  Latitude float64 `thrift:"latitude,3" db:"latitude" json:"3"`
  Longitude float64 `thrift:"longitude,4" db:"longitude" json:"4"`
  Phone string `thrift:"phone,5" db:"phone" json:"5"`
  CategoryId string `thrift:"categoryId,6" db:"categoryId" json:"6"`
  Provider PlaceSearchProvider `thrift:"provider,7" db:"provider" json:"7"`
  Accuracy *GeolocationAccuracy `thrift:"accuracy,8" db:"accuracy" json:"8"`
  AltitudeMeters float64 `thrift:"altitudeMeters,9" db:"altitudeMeters" json:"9"`
}

func NewLocation() *Location {
  return &Location{}
}


func (p *Location) GetTitle() string {
  return p.Title
}

func (p *Location) GetAddress() string {
  return p.Address
}

func (p *Location) GetLatitude() float64 {
  return p.Latitude
}

func (p *Location) GetLongitude() float64 {
  return p.Longitude
}

func (p *Location) GetPhone() string {
  return p.Phone
}

func (p *Location) GetCategoryId() string {
  return p.CategoryId
}

func (p *Location) GetProvider() PlaceSearchProvider {
  return p.Provider
}
var Location_Accuracy_DEFAULT *GeolocationAccuracy
func (p *Location) GetAccuracy() *GeolocationAccuracy {
  if !p.IsSetAccuracy() {
    return Location_Accuracy_DEFAULT
  }
return p.Accuracy
}

func (p *Location) GetAltitudeMeters() float64 {
  return p.AltitudeMeters
}
func (p *Location) IsSetAccuracy() bool {
  return p.Accuracy != nil
}

func (p *Location) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Location)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Title = v
}
  return nil
}

func (p *Location)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Address = v
}
  return nil
}

func (p *Location)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Latitude = v
}
  return nil
}

func (p *Location)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Longitude = v
}
  return nil
}

func (p *Location)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Phone = v
}
  return nil
}

func (p *Location)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.CategoryId = v
}
  return nil
}

func (p *Location)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := PlaceSearchProvider(v)
  p.Provider = temp
}
  return nil
}

func (p *Location)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  p.Accuracy = &GeolocationAccuracy{}
  if err := p.Accuracy.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Accuracy), err)
  }
  return nil
}

func (p *Location)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.AltitudeMeters = v
}
  return nil
}

func (p *Location) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Location"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Location) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "title", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:title: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Title)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.title (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:title: ", p), err) }
  return err
}

func (p *Location) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "address", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:address: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Address)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:address: ", p), err) }
  return err
}

func (p *Location) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "latitude", thrift.DOUBLE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:latitude: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.Latitude)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.latitude (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:latitude: ", p), err) }
  return err
}

func (p *Location) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "longitude", thrift.DOUBLE, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:longitude: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.Longitude)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.longitude (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:longitude: ", p), err) }
  return err
}

func (p *Location) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "phone", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:phone: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Phone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phone (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:phone: ", p), err) }
  return err
}

func (p *Location) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "categoryId", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:categoryId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CategoryId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.categoryId (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:categoryId: ", p), err) }
  return err
}

func (p *Location) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "provider", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:provider: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Provider)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.provider (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:provider: ", p), err) }
  return err
}

func (p *Location) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "accuracy", thrift.STRUCT, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:accuracy: ", p), err) }
  if err := p.Accuracy.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Accuracy), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:accuracy: ", p), err) }
  return err
}

func (p *Location) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "altitudeMeters", thrift.DOUBLE, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:altitudeMeters: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.AltitudeMeters)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.altitudeMeters (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:altitudeMeters: ", p), err) }
  return err
}

func (p *Location) Equals(other *Location) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Title != other.Title { return false }
  if p.Address != other.Address { return false }
  if p.Latitude != other.Latitude { return false }
  if p.Longitude != other.Longitude { return false }
  if p.Phone != other.Phone { return false }
  if p.CategoryId != other.CategoryId { return false }
  if p.Provider != other.Provider { return false }
  if !p.Accuracy.Equals(other.Accuracy) { return false }
  if p.AltitudeMeters != other.AltitudeMeters { return false }
  return true
}

func (p *Location) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Location(%+v)", *p)
}

func (p *Location) Validate() error {
  return nil
}
// Attributes:
//  - RadiusMeters
//  - RadiusConfidence
//  - AltitudeAccuracy
//  - VelocityAccuracy
//  - BearingAccuracy
//  - AccuracyMode
type GeolocationAccuracy struct {
  RadiusMeters float64 `thrift:"radiusMeters,1" db:"radiusMeters" json:"radiusMeters"`
  RadiusConfidence float64 `thrift:"radiusConfidence,2" db:"radiusConfidence" json:"radiusConfidence"`
  AltitudeAccuracy float64 `thrift:"altitudeAccuracy,3" db:"altitudeAccuracy" json:"altitudeAccuracy"`
  VelocityAccuracy float64 `thrift:"velocityAccuracy,4" db:"velocityAccuracy" json:"velocityAccuracy"`
  BearingAccuracy float64 `thrift:"bearingAccuracy,5" db:"bearingAccuracy" json:"bearingAccuracy"`
  AccuracyMode GeolocationAccuracyMode `thrift:"accuracyMode,6" db:"accuracyMode" json:"accuracyMode"`
}

func NewGeolocationAccuracy() *GeolocationAccuracy {
  return &GeolocationAccuracy{}
}


func (p *GeolocationAccuracy) GetRadiusMeters() float64 {
  return p.RadiusMeters
}

func (p *GeolocationAccuracy) GetRadiusConfidence() float64 {
  return p.RadiusConfidence
}

func (p *GeolocationAccuracy) GetAltitudeAccuracy() float64 {
  return p.AltitudeAccuracy
}

func (p *GeolocationAccuracy) GetVelocityAccuracy() float64 {
  return p.VelocityAccuracy
}

func (p *GeolocationAccuracy) GetBearingAccuracy() float64 {
  return p.BearingAccuracy
}

func (p *GeolocationAccuracy) GetAccuracyMode() GeolocationAccuracyMode {
  return p.AccuracyMode
}
func (p *GeolocationAccuracy) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GeolocationAccuracy)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.RadiusMeters = v
}
  return nil
}

func (p *GeolocationAccuracy)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RadiusConfidence = v
}
  return nil
}

func (p *GeolocationAccuracy)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.AltitudeAccuracy = v
}
  return nil
}

func (p *GeolocationAccuracy)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.VelocityAccuracy = v
}
  return nil
}

func (p *GeolocationAccuracy)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.BearingAccuracy = v
}
  return nil
}

func (p *GeolocationAccuracy)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := GeolocationAccuracyMode(v)
  p.AccuracyMode = temp
}
  return nil
}

func (p *GeolocationAccuracy) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GeolocationAccuracy"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GeolocationAccuracy) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "radiusMeters", thrift.DOUBLE, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:radiusMeters: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.RadiusMeters)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.radiusMeters (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:radiusMeters: ", p), err) }
  return err
}

func (p *GeolocationAccuracy) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "radiusConfidence", thrift.DOUBLE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:radiusConfidence: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.RadiusConfidence)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.radiusConfidence (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:radiusConfidence: ", p), err) }
  return err
}

func (p *GeolocationAccuracy) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "altitudeAccuracy", thrift.DOUBLE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:altitudeAccuracy: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.AltitudeAccuracy)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.altitudeAccuracy (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:altitudeAccuracy: ", p), err) }
  return err
}

func (p *GeolocationAccuracy) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "velocityAccuracy", thrift.DOUBLE, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:velocityAccuracy: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.VelocityAccuracy)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.velocityAccuracy (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:velocityAccuracy: ", p), err) }
  return err
}

func (p *GeolocationAccuracy) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "bearingAccuracy", thrift.DOUBLE, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:bearingAccuracy: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.BearingAccuracy)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bearingAccuracy (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:bearingAccuracy: ", p), err) }
  return err
}

func (p *GeolocationAccuracy) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "accuracyMode", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:accuracyMode: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.AccuracyMode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.accuracyMode (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:accuracyMode: ", p), err) }
  return err
}

func (p *GeolocationAccuracy) Equals(other *GeolocationAccuracy) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RadiusMeters != other.RadiusMeters { return false }
  if p.RadiusConfidence != other.RadiusConfidence { return false }
  if p.AltitudeAccuracy != other.AltitudeAccuracy { return false }
  if p.VelocityAccuracy != other.VelocityAccuracy { return false }
  if p.BearingAccuracy != other.BearingAccuracy { return false }
  if p.AccuracyMode != other.AccuracyMode { return false }
  return true
}

func (p *GeolocationAccuracy) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GeolocationAccuracy(%+v)", *p)
}

func (p *GeolocationAccuracy) Validate() error {
  return nil
}
// Attributes:
//  - Code
//  - Reason
//  - ParameterMap
type TalkException struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"1"`
  Reason string `thrift:"reason,2" db:"reason" json:"2"`
  ParameterMap map[string]string `thrift:"parameterMap,3" db:"parameterMap" json:"3"`
}

func NewTalkException() *TalkException {
  return &TalkException{}
}


func (p *TalkException) GetCode() ErrorCode {
  return p.Code
}

func (p *TalkException) GetReason() string {
  return p.Reason
}

func (p *TalkException) GetParameterMap() map[string]string {
  return p.ParameterMap
}
func (p *TalkException) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkException)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *TalkException)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Reason = v
}
  return nil
}

func (p *TalkException)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.ParameterMap =  tMap
  for i := 0; i < size; i ++ {
var _key22 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key22 = v
}
var _val23 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val23 = v
}
    p.ParameterMap[_key22] = _val23
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TalkException) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TalkException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkException) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *TalkException) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reason", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:reason: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Reason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reason (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:reason: ", p), err) }
  return err
}

func (p *TalkException) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parameterMap", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:parameterMap: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.ParameterMap)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.ParameterMap {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:parameterMap: ", p), err) }
  return err
}

func (p *TalkException) Equals(other *TalkException) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if p.Reason != other.Reason { return false }
  if len(p.ParameterMap) != len(other.ParameterMap) { return false }
  for k, _tgt := range p.ParameterMap {
    _src24 := other.ParameterMap[k]
    if _tgt != _src24 { return false }
  }
  return true
}

func (p *TalkException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkException(%+v)", *p)
}

func (p *TalkException) Error() string {
  return p.String()
}

func (TalkException) TExceptionType() thrift.TExceptionType {
  return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*TalkException)(nil)

func (p *TalkException) Validate() error {
  return nil
}
type SyncService interface {
  // Parameters:
  //  - Request
  Sync(ctx context.Context, request *SyncRequest) (_r *SyncResponse, _err error)
  // Parameters:
  //  - LocalRev
  //  - Count
  //  - GlobalRev
  //  - IndividualRev
  FetchOps(ctx context.Context, localRev int64, count int32, globalRev int64, individualRev int64) (_r []*Operation, _err error)
}

type SyncServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewSyncServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *SyncServiceClient {
  return &SyncServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewSyncServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *SyncServiceClient {
  return &SyncServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewSyncServiceClient(c thrift.TClient) *SyncServiceClient {
  return &SyncServiceClient{
    c: c,
  }
}

func (p *SyncServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *SyncServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *SyncServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - Request
func (p *SyncServiceClient) Sync(ctx context.Context, request *SyncRequest) (_r *SyncResponse, _err error) {
  var _args25 SyncServiceSyncArgs
  _args25.Request = request
  var _result27 SyncServiceSyncResult
  var _meta26 thrift.ResponseMeta
  _meta26, _err = p.Client_().Call(ctx, "sync", &_args25, &_result27)
  p.SetLastResponseMeta_(_meta26)
  if _err != nil {
    return
  }
  switch {
  case _result27.E!= nil:
    return _r, _result27.E
  }

  if _ret28 := _result27.GetSuccess(); _ret28 != nil {
    return _ret28, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "sync failed: unknown result")
}

// Parameters:
//  - LocalRev
//  - Count
//  - GlobalRev
//  - IndividualRev
func (p *SyncServiceClient) FetchOps(ctx context.Context, localRev int64, count int32, globalRev int64, individualRev int64) (_r []*Operation, _err error) {
  var _args29 SyncServiceFetchOpsArgs
  _args29.LocalRev = localRev
  _args29.Count = count
  _args29.GlobalRev = globalRev
  _args29.IndividualRev = individualRev
  var _result31 SyncServiceFetchOpsResult
  var _meta30 thrift.ResponseMeta
  _meta30, _err = p.Client_().Call(ctx, "fetchOps", &_args29, &_result31)
  p.SetLastResponseMeta_(_meta30)
  if _err != nil {
    return
  }
  switch {
  case _result31.E!= nil:
    return _r, _result31.E
  }

  return _result31.GetSuccess(), nil
}

type SyncServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler SyncService
}

func (p *SyncServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *SyncServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *SyncServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewSyncServiceProcessor(handler SyncService) *SyncServiceProcessor {

  self32 := &SyncServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self32.processorMap["sync"] = &syncServiceProcessorSync{handler:handler}
  self32.processorMap["fetchOps"] = &syncServiceProcessorFetchOps{handler:handler}
return self32
}

func (p *SyncServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x33 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x33.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x33

}

type syncServiceProcessorSync struct {
  handler SyncService
}

func (p *syncServiceProcessorSync) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err34 error
  args := SyncServiceSyncArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "sync", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SyncServiceSyncResult{}
  if retval, err2 := p.handler.Sync(ctx, args.Request); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *TalkException:
      result.E = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      _exc35 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sync: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "sync", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err34 = thrift.WrapTException(err2)
      }
      if err2 := _exc35.Write(ctx, oprot); _write_err34 == nil && err2 != nil {
        _write_err34 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err34 == nil && err2 != nil {
        _write_err34 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err34 == nil && err2 != nil {
        _write_err34 = thrift.WrapTException(err2)
      }
      if _write_err34 != nil {
        return false, thrift.WrapTException(_write_err34)
      }
      return true, err
    }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "sync", thrift.REPLY, seqId); err2 != nil {
    _write_err34 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err34 == nil && err2 != nil {
    _write_err34 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err34 == nil && err2 != nil {
    _write_err34 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err34 == nil && err2 != nil {
    _write_err34 = thrift.WrapTException(err2)
  }
  if _write_err34 != nil {
    return false, thrift.WrapTException(_write_err34)
  }
  return true, err
}

type syncServiceProcessorFetchOps struct {
  handler SyncService
}

func (p *syncServiceProcessorFetchOps) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err36 error
  args := SyncServiceFetchOpsArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "fetchOps", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SyncServiceFetchOpsResult{}
  if retval, err2 := p.handler.FetchOps(ctx, args.LocalRev, args.Count, args.GlobalRev, args.IndividualRev); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *TalkException:
      result.E = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      _exc37 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fetchOps: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "fetchOps", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err36 = thrift.WrapTException(err2)
      }
      if err2 := _exc37.Write(ctx, oprot); _write_err36 == nil && err2 != nil {
        _write_err36 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err36 == nil && err2 != nil {
        _write_err36 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err36 == nil && err2 != nil {
        _write_err36 = thrift.WrapTException(err2)
      }
      if _write_err36 != nil {
        return false, thrift.WrapTException(_write_err36)
      }
      return true, err
    }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "fetchOps", thrift.REPLY, seqId); err2 != nil {
    _write_err36 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err36 == nil && err2 != nil {
    _write_err36 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err36 == nil && err2 != nil {
    _write_err36 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err36 == nil && err2 != nil {
    _write_err36 = thrift.WrapTException(err2)
  }
  if _write_err36 != nil {
    return false, thrift.WrapTException(_write_err36)
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Request
type SyncServiceSyncArgs struct {
  Request *SyncRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSyncServiceSyncArgs() *SyncServiceSyncArgs {
  return &SyncServiceSyncArgs{}
}

var SyncServiceSyncArgs_Request_DEFAULT *SyncRequest
func (p *SyncServiceSyncArgs) GetRequest() *SyncRequest {
  if !p.IsSetRequest() {
    return SyncServiceSyncArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SyncServiceSyncArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SyncServiceSyncArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SyncServiceSyncArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &SyncRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SyncServiceSyncArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sync_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SyncServiceSyncArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SyncServiceSyncArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SyncServiceSyncArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type SyncServiceSyncResult struct {
  Success *SyncResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewSyncServiceSyncResult() *SyncServiceSyncResult {
  return &SyncServiceSyncResult{}
}

var SyncServiceSyncResult_Success_DEFAULT *SyncResponse
func (p *SyncServiceSyncResult) GetSuccess() *SyncResponse {
  if !p.IsSetSuccess() {
    return SyncServiceSyncResult_Success_DEFAULT
  }
return p.Success
}
var SyncServiceSyncResult_E_DEFAULT *TalkException
func (p *SyncServiceSyncResult) GetE() *TalkException {
  if !p.IsSetE() {
    return SyncServiceSyncResult_E_DEFAULT
  }
return p.E
}
func (p *SyncServiceSyncResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SyncServiceSyncResult) IsSetE() bool {
  return p.E != nil
}

func (p *SyncServiceSyncResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SyncServiceSyncResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &SyncResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SyncServiceSyncResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *SyncServiceSyncResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sync_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SyncServiceSyncResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SyncServiceSyncResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *SyncServiceSyncResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SyncServiceSyncResult(%+v)", *p)
}

// Attributes:
//  - LocalRev
//  - Count
//  - GlobalRev
//  - IndividualRev
type SyncServiceFetchOpsArgs struct {
  // unused field # 1
  LocalRev int64 `thrift:"localRev,2" db:"localRev" json:"localRev"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
  GlobalRev int64 `thrift:"globalRev,4" db:"globalRev" json:"globalRev"`
  IndividualRev int64 `thrift:"individualRev,5" db:"individualRev" json:"individualRev"`
}

func NewSyncServiceFetchOpsArgs() *SyncServiceFetchOpsArgs {
  return &SyncServiceFetchOpsArgs{}
}


func (p *SyncServiceFetchOpsArgs) GetLocalRev() int64 {
  return p.LocalRev
}

func (p *SyncServiceFetchOpsArgs) GetCount() int32 {
  return p.Count
}

func (p *SyncServiceFetchOpsArgs) GetGlobalRev() int64 {
  return p.GlobalRev
}

func (p *SyncServiceFetchOpsArgs) GetIndividualRev() int64 {
  return p.IndividualRev
}
func (p *SyncServiceFetchOpsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SyncServiceFetchOpsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LocalRev = v
}
  return nil
}

func (p *SyncServiceFetchOpsArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *SyncServiceFetchOpsArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.GlobalRev = v
}
  return nil
}

func (p *SyncServiceFetchOpsArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.IndividualRev = v
}
  return nil
}

func (p *SyncServiceFetchOpsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "fetchOps_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SyncServiceFetchOpsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "localRev", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:localRev: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LocalRev)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.localRev (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:localRev: ", p), err) }
  return err
}

func (p *SyncServiceFetchOpsArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *SyncServiceFetchOpsArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "globalRev", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:globalRev: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.GlobalRev)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.globalRev (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:globalRev: ", p), err) }
  return err
}

func (p *SyncServiceFetchOpsArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "individualRev", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:individualRev: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.IndividualRev)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.individualRev (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:individualRev: ", p), err) }
  return err
}

func (p *SyncServiceFetchOpsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SyncServiceFetchOpsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type SyncServiceFetchOpsResult struct {
  Success []*Operation `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewSyncServiceFetchOpsResult() *SyncServiceFetchOpsResult {
  return &SyncServiceFetchOpsResult{}
}

var SyncServiceFetchOpsResult_Success_DEFAULT []*Operation

func (p *SyncServiceFetchOpsResult) GetSuccess() []*Operation {
  return p.Success
}
var SyncServiceFetchOpsResult_E_DEFAULT *TalkException
func (p *SyncServiceFetchOpsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return SyncServiceFetchOpsResult_E_DEFAULT
  }
return p.E
}
func (p *SyncServiceFetchOpsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SyncServiceFetchOpsResult) IsSetE() bool {
  return p.E != nil
}

func (p *SyncServiceFetchOpsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SyncServiceFetchOpsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Operation, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem38 := &Operation{}
    if err := _elem38.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem38), err)
    }
    p.Success = append(p.Success, _elem38)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SyncServiceFetchOpsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *SyncServiceFetchOpsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "fetchOps_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SyncServiceFetchOpsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SyncServiceFetchOpsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *SyncServiceFetchOpsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SyncServiceFetchOpsResult(%+v)", *p)
}


